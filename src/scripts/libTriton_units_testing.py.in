#!/usr/bin/env python2
## -*- coding: utf-8 -*-

import sys
import array

from triton     import *
from triton.ast import *



def test_1():
    setArchitecture(ARCH.X86_64)
    tests = [
        bvsub(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvsub(bv(0x12345678, 32), bv(0, 32)),
        bvsub(bv(0x12345678, 32), bv(1, 32)),
        bvsub(bv(0x12345678, 32), bv(2, 32)),
        bvsub(bv(0x12345678, 32), bv(3, 32)),
        bvsub(bv(0x12345678, 32), bv(32, 32)),
        bvsub(bv(0x12345678, 32), bv(64, 32)),
        bvsub(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvsub(bv(0xf2345678, 32), bv(0, 32)),
        bvsub(bv(0xf2345678, 32), bv(1, 32)),
        bvsub(bv(0xf2345678, 32), bv(2, 32)),
        bvsub(bv(0xf2345678, 32), bv(3, 32)),
        bvsub(bv(0xf2345678, 32), bv(32, 32)),
        bvsub(bv(0xf2345678, 32), bv(64, 32)),
        bvsub(bv(0xf2345678, 32), bv(0x12345678, 32)),

        bvadd(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvadd(bv(0x12345678, 32), bv(0, 32)),
        bvadd(bv(0x12345678, 32), bv(1, 32)),
        bvadd(bv(0x12345678, 32), bv(2, 32)),
        bvadd(bv(0x12345678, 32), bv(3, 32)),
        bvadd(bv(0x12345678, 32), bv(32, 32)),
        bvadd(bv(0x12345678, 32), bv(64, 32)),
        bvadd(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvadd(bv(0xf2345678, 32), bv(0, 32)),
        bvadd(bv(0xf2345678, 32), bv(1, 32)),
        bvadd(bv(0xf2345678, 32), bv(2, 32)),
        bvadd(bv(0xf2345678, 32), bv(3, 32)),
        bvadd(bv(0xf2345678, 32), bv(32, 32)),
        bvadd(bv(0xf2345678, 32), bv(64, 32)),
        bvadd(bv(0xf2345678, 32), bv(0x12345678, 32)),

        bvxor(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvxor(bv(0x12345678, 32), bv(0, 32)),
        bvxor(bv(0x12345678, 32), bv(1, 32)),
        bvxor(bv(0x12345678, 32), bv(2, 32)),
        bvxor(bv(0x12345678, 32), bv(3, 32)),
        bvxor(bv(0x12345678, 32), bv(32, 32)),
        bvxor(bv(0x12345678, 32), bv(64, 32)),
        bvxor(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvxor(bv(0xf2345678, 32), bv(0, 32)),
        bvxor(bv(0xf2345678, 32), bv(1, 32)),
        bvxor(bv(0xf2345678, 32), bv(2, 32)),
        bvxor(bv(0xf2345678, 32), bv(3, 32)),
        bvxor(bv(0xf2345678, 32), bv(32, 32)),
        bvxor(bv(0xf2345678, 32), bv(64, 32)),
        bvxor(bv(0xf2345678, 32), bv(0x12345678, 32)),

        bvor(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvor(bv(0x12345678, 32), bv(0, 32)),
        bvor(bv(0x12345678, 32), bv(1, 32)),
        bvor(bv(0x12345678, 32), bv(2, 32)),
        bvor(bv(0x12345678, 32), bv(3, 32)),
        bvor(bv(0x12345678, 32), bv(32, 32)),
        bvor(bv(0x12345678, 32), bv(64, 32)),
        bvor(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvor(bv(0xf2345678, 32), bv(0, 32)),
        bvor(bv(0xf2345678, 32), bv(1, 32)),
        bvor(bv(0xf2345678, 32), bv(2, 32)),
        bvor(bv(0xf2345678, 32), bv(3, 32)),
        bvor(bv(0xf2345678, 32), bv(32, 32)),
        bvor(bv(0xf2345678, 32), bv(64, 32)),
        bvor(bv(0xf2345678, 32), bv(0x12345678, 32)),

        bvand(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvand(bv(0x12345678, 32), bv(0, 32)),
        bvand(bv(0x12345678, 32), bv(1, 32)),
        bvand(bv(0x12345678, 32), bv(2, 32)),
        bvand(bv(0x12345678, 32), bv(3, 32)),
        bvand(bv(0x12345678, 32), bv(32, 32)),
        bvand(bv(0x12345678, 32), bv(64, 32)),
        bvand(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvand(bv(0xf2345678, 32), bv(0, 32)),
        bvand(bv(0xf2345678, 32), bv(1, 32)),
        bvand(bv(0xf2345678, 32), bv(2, 32)),
        bvand(bv(0xf2345678, 32), bv(3, 32)),
        bvand(bv(0xf2345678, 32), bv(32, 32)),
        bvand(bv(0xf2345678, 32), bv(64, 32)),
        bvand(bv(0xf2345678, 32), bv(0x12345678, 32)),

        bvnand(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvnand(bv(0x12345678, 32), bv(0, 32)),
        bvnand(bv(0x12345678, 32), bv(1, 32)),
        bvnand(bv(0x12345678, 32), bv(2, 32)),
        bvnand(bv(0x12345678, 32), bv(3, 32)),
        bvnand(bv(0x12345678, 32), bv(32, 32)),
        bvnand(bv(0x12345678, 32), bv(64, 32)),
        bvnand(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvnand(bv(0xf2345678, 32), bv(0, 32)),
        bvnand(bv(0xf2345678, 32), bv(1, 32)),
        bvnand(bv(0xf2345678, 32), bv(2, 32)),
        bvnand(bv(0xf2345678, 32), bv(3, 32)),
        bvnand(bv(0xf2345678, 32), bv(32, 32)),
        bvnand(bv(0xf2345678, 32), bv(64, 32)),
        bvnand(bv(0xf2345678, 32), bv(0x12345678, 32)),

        bvnor(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvnor(bv(0x12345678, 32), bv(0, 32)),
        bvnor(bv(0x12345678, 32), bv(1, 32)),
        bvnor(bv(0x12345678, 32), bv(2, 32)),
        bvnor(bv(0x12345678, 32), bv(3, 32)),
        bvnor(bv(0x12345678, 32), bv(32, 32)),
        bvnor(bv(0x12345678, 32), bv(64, 32)),
        bvnor(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvnor(bv(0xf2345678, 32), bv(0, 32)),
        bvnor(bv(0xf2345678, 32), bv(1, 32)),
        bvnor(bv(0xf2345678, 32), bv(2, 32)),
        bvnor(bv(0xf2345678, 32), bv(3, 32)),
        bvnor(bv(0xf2345678, 32), bv(32, 32)),
        bvnor(bv(0xf2345678, 32), bv(64, 32)),
        bvnor(bv(0xf2345678, 32), bv(0x12345678, 32)),

        bvxnor(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvxnor(bv(0x12345678, 32), bv(0, 32)),
        bvxnor(bv(0x12345678, 32), bv(1, 32)),
        bvxnor(bv(0x12345678, 32), bv(2, 32)),
        bvxnor(bv(0x12345678, 32), bv(3, 32)),
        bvxnor(bv(0x12345678, 32), bv(32, 32)),
        bvxnor(bv(0x12345678, 32), bv(64, 32)),
        bvxnor(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvxnor(bv(0xf2345678, 32), bv(0, 32)),
        bvxnor(bv(0xf2345678, 32), bv(1, 32)),
        bvxnor(bv(0xf2345678, 32), bv(2, 32)),
        bvxnor(bv(0xf2345678, 32), bv(3, 32)),
        bvxnor(bv(0xf2345678, 32), bv(32, 32)),
        bvxnor(bv(0xf2345678, 32), bv(64, 32)),
        bvxnor(bv(0xf2345678, 32), bv(0x12345678, 32)),

        bvmul(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvmul(bv(0x12345678, 32), bv(0, 32)),
        bvmul(bv(0x12345678, 32), bv(1, 32)),
        bvmul(bv(0x12345678, 32), bv(2, 32)),
        bvmul(bv(0x12345678, 32), bv(3, 32)),
        bvmul(bv(0x12345678, 32), bv(32, 32)),
        bvmul(bv(0x12345678, 32), bv(64, 32)),
        bvmul(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvmul(bv(0xf2345678, 32), bv(0, 32)),
        bvmul(bv(0xf2345678, 32), bv(1, 32)),
        bvmul(bv(0xf2345678, 32), bv(2, 32)),
        bvmul(bv(0xf2345678, 32), bv(3, 32)),
        bvmul(bv(0xf2345678, 32), bv(32, 32)),
        bvmul(bv(0xf2345678, 32), bv(64, 32)),
        bvmul(bv(0xf2345678, 32), bv(0x12345678, 32)),

        bvneg(bv(0x88888888, 32)),
        bvneg(bv(0x12345678, 32)),
        bvneg(bv(0x22345678, 32)),
        bvneg(bv(0x32345678, 32)),
        bvneg(bv(0x42345678, 32)),
        bvneg(bv(0x52345678, 32)),
        bvneg(bv(0x62345678, 32)),
        bvneg(bv(0x72345678, 32)),
        bvneg(bv(0x82345678, 32)),
        bvneg(bv(0x92345678, 32)),
        bvneg(bv(0xa2345678, 32)),
        bvneg(bv(0xb2345678, 32)),
        bvneg(bv(0xc2345678, 32)),
        bvneg(bv(0xd345678, 32)),
        bvneg(bv(0xe2345678, 32)),
        bvneg(bv(0xf2345678, 32)),
        bvneg(bv(0x1, 32)),
        bvneg(bv(0x2, 32)),
        bvneg(bv(0x3, 32)),
        bvneg(bv(0x4, 32)),
        bvneg(bv(0x5, 32)),
        bvneg(bv(0x6, 32)),
        bvneg(bv(0xa, 32)),
        bvneg(bv(0xe, 32)),
        bvneg(bv(0xf, 32)),
        bvneg(bv(0x1f, 32)),
        bvneg(bv(0x2f, 32)),
        bvneg(bv(0x3e, 32)),
        bvneg(bv(0xffff, 32)),

        bvnot(bv(0x88888888, 32)),
        bvnot(bv(0x12345678, 32)),
        bvnot(bv(0x22345678, 32)),
        bvnot(bv(0x32345678, 32)),
        bvnot(bv(0x42345678, 32)),
        bvnot(bv(0x52345678, 32)),
        bvnot(bv(0x62345678, 32)),
        bvnot(bv(0x72345678, 32)),
        bvnot(bv(0x82345678, 32)),
        bvnot(bv(0x92345678, 32)),
        bvnot(bv(0xa2345678, 32)),
        bvnot(bv(0xb2345678, 32)),
        bvnot(bv(0xc2345678, 32)),
        bvnot(bv(0xd345678, 32)),
        bvnot(bv(0xe2345678, 32)),
        bvnot(bv(0xf2345678, 32)),
        bvnot(bv(0x1, 32)),
        bvnot(bv(0x2, 32)),
        bvnot(bv(0x3, 32)),
        bvnot(bv(0x4, 32)),
        bvnot(bv(0x5, 32)),
        bvnot(bv(0x6, 32)),
        bvnot(bv(0xa, 32)),
        bvnot(bv(0xe, 32)),
        bvnot(bv(0xf, 32)),
        bvnot(bv(0x1f, 32)),
        bvnot(bv(0x2f, 32)),
        bvnot(bv(0x3e, 32)),
        bvnot(bv(0xffff, 32)),

        bvsdiv(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvsdiv(bv(0x12345678, 32), bv(0, 32)),
        bvsdiv(bv(0x12345678, 32), bv(1, 32)),
        bvsdiv(bv(0x12345678, 32), bv(2, 32)),
        bvsdiv(bv(0x12345678, 32), bv(3, 32)),
        bvsdiv(bv(0x12345678, 32), bv(32, 32)),
        bvsdiv(bv(0x12345678, 32), bv(64, 32)),
        bvsdiv(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvsdiv(bv(0xf2345678, 32), bv(0, 32)),
        bvsdiv(bv(0xf2345678, 32), bv(1, 32)),
        bvsdiv(bv(0xf2345678, 32), bv(2, 32)),
        bvsdiv(bv(0xf2345678, 32), bv(3, 32)),
        bvsdiv(bv(0xf2345678, 32), bv(32, 32)),
        bvsdiv(bv(0xf2345678, 32), bv(64, 32)),
        bvsdiv(bv(0xf2345678, 32), bv(0x12345678, 32)),
        bvsdiv(bv(0b10000000, 8), bv(0, 8)),
        bvsdiv(bv(0b10000000, 8), bv(1, 8)),
        bvsdiv(bv(0b10000000, 8), bv(2, 8)),
        bvsdiv(bv(0b10000000, 8), bv(3, 8)),
        bvsdiv(bv(0b10000000, 8), bv(4, 8)),
        bvsdiv(bv(0b10000000, 8), bv(5, 8)),
        bvsdiv(bv(0b10000000, 8), bv(6, 8)),
        bvsdiv(bv(0b10000000, 8), bv(7, 8)),
        bvsdiv(bv(0b10000000, 8), bv(8, 8)),
        bvsdiv(bv(0b10000000, 8), bv(9, 8)),
        bvsdiv(bv(0b10000000, 8), bv(123, 8)),
        bvsdiv(bv(0b10001000, 8), bv(0, 8)),
        bvsdiv(bv(0b10001000, 8), bv(1, 8)),
        bvsdiv(bv(0b10001000, 8), bv(2, 8)),
        bvsdiv(bv(0b10001000, 8), bv(3, 8)),
        bvsdiv(bv(0b10001000, 8), bv(4, 8)),
        bvsdiv(bv(0b10001000, 8), bv(5, 8)),
        bvsdiv(bv(0b10001000, 8), bv(6, 8)),
        bvsdiv(bv(0b10001000, 8), bv(7, 8)),
        bvsdiv(bv(0b10001000, 8), bv(8, 8)),
        bvsdiv(bv(0b10001000, 8), bv(9, 8)),
        bvsdiv(bv(0b10001000, 8), bv(123, 8)),
        bvsdiv(bv(0b00010001, 8), bv(0b00000001, 8)),
        bvsdiv(bv(0b00010010, 8), bv(0b00000010, 8)),
        bvsdiv(bv(0b00010100, 8), bv(0b00000100, 8)),
        bvsdiv(bv(0b00001000, 8), bv(0b00001000, 8)),
        bvsdiv(bv(0b00010000, 8), bv(0b00010000, 8)),
        bvsdiv(bv(0b00100000, 8), bv(0b00100000, 8)),
        bvsdiv(bv(0b01000000, 8), bv(0b01000001, 8)),
        bvsdiv(bv(0b10000000, 8), bv(0b10000010, 8)),
        bvsdiv(bv(0b01000000, 8), bv(0b00000011, 8)),
        bvsdiv(bv(0b00100000, 8), bv(0b00000101, 8)),
        bvsdiv(bv(0b00010000, 8), bv(0b00000110, 8)),
        bvsdiv(bv(0b0010001, 7), bv(0b0000001, 7)),
        bvsdiv(bv(0b0010010, 7), bv(0b0000010, 7)),
        bvsdiv(bv(0b0010100, 7), bv(0b0000100, 7)),
        bvsdiv(bv(0b0001000, 7), bv(0b0001000, 7)),
        bvsdiv(bv(0b0010000, 7), bv(0b0010000, 7)),
        bvsdiv(bv(0b0100000, 7), bv(0b0100000, 7)),
        bvsdiv(bv(0b0000000, 7), bv(0b0000001, 7)),
        bvsdiv(bv(0b1000000, 7), bv(0b1000010, 7)),
        bvsdiv(bv(0b0000000, 7), bv(0b0000100, 7)),
        bvsdiv(bv(0b0100000, 7), bv(0b0000110, 7)),
        bvsdiv(bv(0b0010000, 7), bv(0b0000111, 7)),
        bvsdiv(bv(291, 16), sx(8, bv(251, 8))),
        bvsdiv(bv(4, 16), sx(8, bv(255, 8))),
        bvsdiv(zx(16, bv(42313, 16)), sx(16, bv(65491, 16))),
        bvsdiv(zx(16, bv(32768, 16)), sx(16, bv(65535, 16))),
        bvsdiv(zx(32, bv(4294734073, 32)), sx(32, bv(4294967251, 32))),
        bvsdiv(zx(32, bv(2147483648, 32)), sx(32, bv(4294967295, 32))),
        bvsdiv(zx(64, bv(18446744073709318393, 64)), sx(64, bv(18446744073709551571, 64))),
        bvsdiv(zx(64, bv(9223372036854775808, 64)), sx(64, bv(18446744073709551615, 64))),

        bvudiv(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvudiv(bv(0x12345678, 32), bv(0, 32)),
        bvudiv(bv(0x12345678, 32), bv(1, 32)),
        bvudiv(bv(0x12345678, 32), bv(2, 32)),
        bvudiv(bv(0x12345678, 32), bv(3, 32)),
        bvudiv(bv(0x12345678, 32), bv(32, 32)),
        bvudiv(bv(0x12345678, 32), bv(64, 32)),
        bvudiv(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvudiv(bv(0xf2345678, 32), bv(0, 32)),
        bvudiv(bv(0xf2345678, 32), bv(1, 32)),
        bvudiv(bv(0xf2345678, 32), bv(2, 32)),
        bvudiv(bv(0xf2345678, 32), bv(3, 32)),
        bvudiv(bv(0xf2345678, 32), bv(32, 32)),
        bvudiv(bv(0xf2345678, 32), bv(64, 32)),
        bvudiv(bv(0xf2345678, 32), bv(0x12345678, 32)),
        bvudiv(bv(0b10000000, 8), bv(0, 8)),
        bvudiv(bv(0b10000000, 8), bv(1, 8)),
        bvudiv(bv(0b10000000, 8), bv(2, 8)),
        bvudiv(bv(0b10000000, 8), bv(3, 8)),
        bvudiv(bv(0b10000000, 8), bv(4, 8)),
        bvudiv(bv(0b10000000, 8), bv(5, 8)),
        bvudiv(bv(0b10000000, 8), bv(6, 8)),
        bvudiv(bv(0b10000000, 8), bv(7, 8)),
        bvudiv(bv(0b10000000, 8), bv(8, 8)),
        bvudiv(bv(0b10000000, 8), bv(9, 8)),
        bvudiv(bv(0b10000000, 8), bv(123, 8)),
        bvudiv(bv(0b10001000, 8), bv(0, 8)),
        bvudiv(bv(0b10001000, 8), bv(1, 8)),
        bvudiv(bv(0b10001000, 8), bv(2, 8)),
        bvudiv(bv(0b10001000, 8), bv(3, 8)),
        bvudiv(bv(0b10001000, 8), bv(4, 8)),
        bvudiv(bv(0b10001000, 8), bv(5, 8)),
        bvudiv(bv(0b10001000, 8), bv(6, 8)),
        bvudiv(bv(0b10001000, 8), bv(7, 8)),
        bvudiv(bv(0b10001000, 8), bv(8, 8)),
        bvudiv(bv(0b10001000, 8), bv(9, 8)),
        bvudiv(bv(0b10001000, 8), bv(123, 8)),
        bvudiv(bv(0b00010001, 8), bv(0b00000001, 8)),
        bvudiv(bv(0b00010010, 8), bv(0b00000010, 8)),
        bvudiv(bv(0b00010100, 8), bv(0b00000100, 8)),
        bvudiv(bv(0b00001000, 8), bv(0b00001000, 8)),
        bvudiv(bv(0b00010000, 8), bv(0b00010000, 8)),
        bvudiv(bv(0b00100000, 8), bv(0b00100000, 8)),
        bvudiv(bv(0b01000000, 8), bv(0b01000001, 8)),
        bvudiv(bv(0b10000000, 8), bv(0b10000010, 8)),
        bvudiv(bv(0b01000000, 8), bv(0b00000011, 8)),
        bvudiv(bv(0b00100000, 8), bv(0b00000101, 8)),
        bvudiv(bv(0b00010000, 8), bv(0b00000110, 8)),
        bvudiv(bv(0b0010001, 7), bv(0b0000001, 7)),
        bvudiv(bv(0b0010010, 7), bv(0b0000010, 7)),
        bvudiv(bv(0b0010100, 7), bv(0b0000100, 7)),
        bvudiv(bv(0b0001000, 7), bv(0b0001000, 7)),
        bvudiv(bv(0b0010000, 7), bv(0b0010000, 7)),
        bvudiv(bv(0b0100000, 7), bv(0b0100000, 7)),
        bvudiv(bv(0b0000000, 7), bv(0b0000001, 7)),
        bvudiv(bv(0b1000000, 7), bv(0b1000010, 7)),
        bvudiv(bv(0b0000000, 7), bv(0b0000100, 7)),
        bvudiv(bv(0b0100000, 7), bv(0b0000110, 7)),
        bvudiv(bv(0b0010000, 7), bv(0b0000111, 7)),
        bvudiv(bv(291, 16), sx(8, bv(251, 8))),
        bvudiv(bv(4, 16), sx(8, bv(255, 8))),
        bvudiv(zx(16, bv(42313, 16)), sx(16, bv(65491, 16))),
        bvudiv(zx(16, bv(32768, 16)), sx(16, bv(65535, 16))),
        bvudiv(zx(32, bv(4294734073, 32)), sx(32, bv(4294967251, 32))),
        bvudiv(zx(32, bv(2147483648, 32)), sx(32, bv(4294967295, 32))),
        bvudiv(zx(64, bv(18446744073709318393, 64)), sx(64, bv(18446744073709551571, 64))),
        bvudiv(zx(64, bv(9223372036854775808, 64)), sx(64, bv(18446744073709551615, 64))),

        bvashr(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvashr(bv(0x12345678, 32), bv(0, 32)),
        bvashr(bv(0x12345678, 32), bv(1, 32)),
        bvashr(bv(0x12345678, 32), bv(2, 32)),
        bvashr(bv(0x12345678, 32), bv(3, 32)),
        bvashr(bv(0x12345678, 32), bv(32, 32)),
        bvashr(bv(0x12345678, 32), bv(64, 32)),
        bvashr(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvashr(bv(0xf2345678, 32), bv(0, 32)),
        bvashr(bv(0xf2345678, 32), bv(1, 32)),
        bvashr(bv(0xf2345678, 32), bv(2, 32)),
        bvashr(bv(0xf2345678, 32), bv(3, 32)),
        bvashr(bv(0xf2345678, 32), bv(32, 32)),
        bvashr(bv(0xf2345678, 32), bv(64, 32)),
        bvashr(bv(0xf2345678, 32), bv(0x12345678, 32)),
        bvashr(bv(0b10000000, 8), bv(0, 8)),
        bvashr(bv(0b10000000, 8), bv(1, 8)),
        bvashr(bv(0b10000000, 8), bv(2, 8)),
        bvashr(bv(0b10000000, 8), bv(3, 8)),
        bvashr(bv(0b10000000, 8), bv(4, 8)),
        bvashr(bv(0b10000000, 8), bv(5, 8)),
        bvashr(bv(0b10000000, 8), bv(6, 8)),
        bvashr(bv(0b10000000, 8), bv(7, 8)),
        bvashr(bv(0b10000000, 8), bv(8, 8)),
        bvashr(bv(0b10000000, 8), bv(9, 8)),
        bvashr(bv(0b10000000, 8), bv(123, 8)),
        bvashr(bv(0b10001000, 8), bv(0, 8)),
        bvashr(bv(0b10001000, 8), bv(1, 8)),
        bvashr(bv(0b10001000, 8), bv(2, 8)),
        bvashr(bv(0b10001000, 8), bv(3, 8)),
        bvashr(bv(0b10001000, 8), bv(4, 8)),
        bvashr(bv(0b10001000, 8), bv(5, 8)),
        bvashr(bv(0b10001000, 8), bv(6, 8)),
        bvashr(bv(0b10001000, 8), bv(7, 8)),
        bvashr(bv(0b10001000, 8), bv(8, 8)),
        bvashr(bv(0b10001000, 8), bv(9, 8)),
        bvashr(bv(0b10001000, 8), bv(123, 8)),
        bvashr(bv(0b00010001, 8), bv(0b00000001, 8)),
        bvashr(bv(0b00010010, 8), bv(0b00000010, 8)),
        bvashr(bv(0b00010100, 8), bv(0b00000100, 8)),
        bvashr(bv(0b00001000, 8), bv(0b00001000, 8)),
        bvashr(bv(0b00010000, 8), bv(0b00010000, 8)),
        bvashr(bv(0b00100000, 8), bv(0b00100000, 8)),
        bvashr(bv(0b01000000, 8), bv(0b01000001, 8)),
        bvashr(bv(0b10000000, 8), bv(0b10000010, 8)),
        bvashr(bv(0b01000000, 8), bv(0b00000011, 8)),
        bvashr(bv(0b00100000, 8), bv(0b00000101, 8)),
        bvashr(bv(0b00010000, 8), bv(0b00000110, 8)),
        bvashr(bv(0b0010001, 7), bv(0b0000001, 7)),
        bvashr(bv(0b0010010, 7), bv(0b0000010, 7)),
        bvashr(bv(0b0010100, 7), bv(0b0000100, 7)),
        bvashr(bv(0b0001000, 7), bv(0b0001000, 7)),
        bvashr(bv(0b0010000, 7), bv(0b0010000, 7)),
        bvashr(bv(0b0100000, 7), bv(0b0100000, 7)),
        bvashr(bv(0b0000000, 7), bv(0b0000001, 7)),
        bvashr(bv(0b1000000, 7), bv(0b1000010, 7)),
        bvashr(bv(0b0000000, 7), bv(0b0000100, 7)),
        bvashr(bv(0b0100000, 7), bv(0b0000110, 7)),
        bvashr(bv(0b0010000, 7), bv(0b0000111, 7)),
        bvashr(bv(0xfe00000000000000, 64), bv(8, 64)),

        bvlshr(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvlshr(bv(0x12345678, 32), bv(0, 32)),
        bvlshr(bv(0x12345678, 32), bv(1, 32)),
        bvlshr(bv(0x12345678, 32), bv(2, 32)),
        bvlshr(bv(0x12345678, 32), bv(3, 32)),
        bvlshr(bv(0x12345678, 32), bv(32, 32)),
        bvlshr(bv(0x12345678, 32), bv(64, 32)),
        bvlshr(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvlshr(bv(0xf2345678, 32), bv(0, 32)),
        bvlshr(bv(0xf2345678, 32), bv(1, 32)),
        bvlshr(bv(0xf2345678, 32), bv(2, 32)),
        bvlshr(bv(0xf2345678, 32), bv(3, 32)),
        bvlshr(bv(0xf2345678, 32), bv(4, 32)),
        bvlshr(bv(0xf2345678, 32), bv(5, 32)),
        bvlshr(bv(0xf2345678, 32), bv(6, 32)),
        bvlshr(bv(0xf2345678, 32), bv(32, 32)),
        bvlshr(bv(0xf2345678, 32), bv(64, 32)),
        bvlshr(bv(0xf2345678, 32), bv(0x12345678, 32)),
        bvlshr(bv(0b10000000, 8), bv(0, 8)),
        bvlshr(bv(0b10000000, 8), bv(1, 8)),
        bvlshr(bv(0b10000000, 8), bv(2, 8)),
        bvlshr(bv(0b10000000, 8), bv(3, 8)),
        bvlshr(bv(0b10000000, 8), bv(4, 8)),
        bvlshr(bv(0b10000000, 8), bv(5, 8)),
        bvlshr(bv(0b10000000, 8), bv(6, 8)),
        bvlshr(bv(0b10000000, 8), bv(7, 8)),
        bvlshr(bv(0b10000000, 8), bv(8, 8)),
        bvlshr(bv(0b10000000, 8), bv(9, 8)),
        bvlshr(bv(0b10000000, 8), bv(123, 8)),
        bvlshr(bv(0b10001000, 8), bv(0, 8)),
        bvlshr(bv(0b10001000, 8), bv(1, 8)),
        bvlshr(bv(0b10001000, 8), bv(2, 8)),
        bvlshr(bv(0b10001000, 8), bv(3, 8)),
        bvlshr(bv(0b10001000, 8), bv(4, 8)),
        bvlshr(bv(0b10001000, 8), bv(5, 8)),
        bvlshr(bv(0b10001000, 8), bv(6, 8)),
        bvlshr(bv(0b10001000, 8), bv(7, 8)),
        bvlshr(bv(0b10001000, 8), bv(8, 8)),
        bvlshr(bv(0b10001000, 8), bv(9, 8)),
        bvlshr(bv(0b10001000, 8), bv(123, 8)),

        bvshl(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvshl(bv(0x12345678, 32), bv(0, 32)),
        bvshl(bv(0x12345678, 32), bv(1, 32)),
        bvshl(bv(0x12345678, 32), bv(2, 32)),
        bvshl(bv(0x12345678, 32), bv(3, 32)),
        bvshl(bv(0x12345678, 32), bv(32, 32)),
        bvshl(bv(0x12345678, 32), bv(64, 32)),
        bvshl(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvshl(bv(0xf2345678, 32), bv(0, 32)),
        bvshl(bv(0xf2345678, 32), bv(1, 32)),
        bvshl(bv(0xf2345678, 32), bv(2, 32)),
        bvshl(bv(0xf2345678, 32), bv(3, 32)),
        bvshl(bv(0xf2345678, 32), bv(32, 32)),
        bvshl(bv(0xf2345678, 32), bv(64, 32)),
        bvshl(bv(0xf2345678, 32), bv(0x12345678, 32)),
        bvshl(bv(0b00000001, 8), bv(0, 8)),
        bvshl(bv(0b00000001, 8), bv(1, 8)),
        bvshl(bv(0b00000001, 8), bv(2, 8)),
        bvshl(bv(0b00000001, 8), bv(3, 8)),
        bvshl(bv(0b00000001, 8), bv(4, 8)),
        bvshl(bv(0b00000001, 8), bv(5, 8)),
        bvshl(bv(0b00000001, 8), bv(6, 8)),
        bvshl(bv(0b00000001, 8), bv(7, 8)),
        bvshl(bv(0b00000001, 8), bv(8, 8)),
        bvshl(bv(0b00000001, 8), bv(9, 8)),
        bvshl(bv(0b00000001, 8), bv(123, 8)),
        bvshl(bv(0b00000001, 8), bv(0, 8)),
        bvshl(bv(0b00000011, 8), bv(1, 8)),
        bvshl(bv(0b00000101, 8), bv(2, 8)),
        bvshl(bv(0b00001001, 8), bv(3, 8)),
        bvshl(bv(0b00010001, 8), bv(4, 8)),
        bvshl(bv(0b00100001, 8), bv(5, 8)),
        bvshl(bv(0b01000001, 8), bv(6, 8)),
        bvshl(bv(0b10000011, 8), bv(7, 8)),
        bvshl(bv(0b01000101, 8), bv(8, 8)),
        bvshl(bv(0b00101001, 8), bv(9, 8)),
        bvshl(bv(0b00010001, 8), bv(123, 8)),

        bvrol(0x88888888, bv(0x99999999, 32)),
        bvrol(0x12345678, bv(0, 32)),
        bvrol(0x12345678, bv(1, 32)),
        bvrol(0x12345678, bv(2, 32)),
        bvrol(0x12345678, bv(3, 32)),
        bvrol(0x12345678, bv(32, 32)),
        bvrol(0x12345678, bv(64, 32)),
        bvrol(0x12345678, bv(0x12345678, 32)),
        bvrol(0xf2345678, bv(0, 32)),
        bvrol(0xf2345678, bv(1, 32)),
        bvrol(0xf2345678, bv(2, 32)),
        bvrol(0xf2345678, bv(3, 32)),
        bvrol(0xf2345678, bv(32, 32)),
        bvrol(0xf2345678, bv(64, 32)),
        bvrol(0xf2345678, bv(0x12345678, 32)),

        bvrol(0x99999999, bv(0x88888888, 32)),
        bvrol(0, bv(0x12345678, 32)),
        bvrol(1, bv(0x12345678, 32)),
        bvrol(2, bv(0x12345678, 32)),
        bvrol(3, bv(0x12345678, 32)),
        bvrol(32, bv(0x12345678, 32)),
        bvrol(64, bv(0x12345678, 32)),
        bvrol(0x12345678, bv(0x12345678, 32)),
        bvrol(0, bv(0xf2345678, 32)),
        bvrol(1, bv(0xf2345678, 32)),
        bvrol(2, bv(0xf2345678, 32)),
        bvrol(3, bv(0xf2345678, 32)),
        bvrol(32, bv(0xf2345678, 32)),
        bvrol(64, bv(0xf2345678, 32)),
        bvrol(0x12345678, bv(0xf2345678, 32)),

        bvror(0x88888888, bv(0x99999999, 32)),
        bvror(0x12345678, bv(0, 32)),
        bvror(0x12345678, bv(1, 32)),
        bvror(0x12345678, bv(2, 32)),
        bvror(0x12345678, bv(3, 32)),
        bvror(0x12345678, bv(32, 32)),
        bvror(0x12345678, bv(64, 32)),
        bvror(0x12345678, bv(0x12345678, 32)),
        bvror(0xf2345678, bv(0, 32)),
        bvror(0xf2345678, bv(1, 32)),
        bvror(0xf2345678, bv(2, 32)),
        bvror(0xf2345678, bv(3, 32)),
        bvror(0xf2345678, bv(32, 32)),
        bvror(0xf2345678, bv(64, 32)),
        bvror(0xf2345678, bv(0x12345678, 32)),

        bvror(0x99999999, bv(0x88888888, 32)),
        bvror(0, bv(0x12345678, 32)),
        bvror(1, bv(0x12345678, 32)),
        bvror(2, bv(0x12345678, 32)),
        bvror(3, bv(0x12345678, 32)),
        bvror(32, bv(0x12345678, 32)),
        bvror(64, bv(0x12345678, 32)),
        bvror(0x12345678, bv(0x12345678, 32)),
        bvror(0, bv(0xf2345678, 32)),
        bvror(1, bv(0xf2345678, 32)),
        bvror(2, bv(0xf2345678, 32)),
        bvror(3, bv(0xf2345678, 32)),
        bvror(32, bv(0xf2345678, 32)),
        bvror(64, bv(0xf2345678, 32)),
        bvror(0x12345678, bv(0xf2345678, 32)),

        bvsmod(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvsmod(bv(0x12345678, 32), bv(0, 32)),
        bvsmod(bv(0x12345678, 32), bv(1, 32)),
        bvsmod(bv(0x12345678, 32), bv(2, 32)),
        bvsmod(bv(0x12345678, 32), bv(3, 32)),
        bvsmod(bv(0x12345678, 32), bv(32, 32)),
        bvsmod(bv(0x12345678, 32), bv(64, 32)),
        bvsmod(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvsmod(bv(0xf2345678, 32), bv(0, 32)),
        bvsmod(bv(0xf2345678, 32), bv(1, 32)),
        bvsmod(bv(0xf2345678, 32), bv(2, 32)),
        bvsmod(bv(0xf2345678, 32), bv(3, 32)),
        bvsmod(bv(0xf2345678, 32), bv(32, 32)),
        bvsmod(bv(0xf2345678, 32), bv(64, 32)),
        bvsmod(bv(0xf2345678, 32), bv(0x12345678, 32)),
        bvsmod(bv(0b10000000, 8), bv(0, 8)),
        bvsmod(bv(0b10000000, 8), bv(1, 8)),
        bvsmod(bv(0b10000000, 8), bv(2, 8)),
        bvsmod(bv(0b10000000, 8), bv(3, 8)),
        bvsmod(bv(0b10000000, 8), bv(4, 8)),
        bvsmod(bv(0b10000000, 8), bv(5, 8)),
        bvsmod(bv(0b10000000, 8), bv(6, 8)),
        bvsmod(bv(0b10000000, 8), bv(7, 8)),
        bvsmod(bv(0b10000000, 8), bv(8, 8)),
        bvsmod(bv(0b10000000, 8), bv(9, 8)),
        bvsmod(bv(0b10000000, 8), bv(123, 8)),
        bvsmod(bv(0b10001000, 8), bv(0, 8)),
        bvsmod(bv(0b10001000, 8), bv(1, 8)),
        bvsmod(bv(0b10001000, 8), bv(2, 8)),
        bvsmod(bv(0b10001000, 8), bv(3, 8)),
        bvsmod(bv(0b10001000, 8), bv(4, 8)),
        bvsmod(bv(0b10001000, 8), bv(5, 8)),
        bvsmod(bv(0b10001000, 8), bv(6, 8)),
        bvsmod(bv(0b10001000, 8), bv(7, 8)),
        bvsmod(bv(0b10001000, 8), bv(8, 8)),
        bvsmod(bv(0b10001000, 8), bv(9, 8)),
        bvsmod(bv(0b10001000, 8), bv(123, 8)),
        bvsmod(bv(0b00010001, 8), bv(0b00000001, 8)),
        bvsmod(bv(0b00010010, 8), bv(0b00000010, 8)),
        bvsmod(bv(0b00010100, 8), bv(0b00000100, 8)),
        bvsmod(bv(0b00001000, 8), bv(0b00001000, 8)),
        bvsmod(bv(0b00010000, 8), bv(0b00010000, 8)),
        bvsmod(bv(0b00100000, 8), bv(0b00100000, 8)),
        bvsmod(bv(0b01000000, 8), bv(0b01000001, 8)),
        bvsmod(bv(0b10000000, 8), bv(0b10000010, 8)),
        bvsmod(bv(0b01000000, 8), bv(0b00000011, 8)),
        bvsmod(bv(0b00100000, 8), bv(0b00000101, 8)),
        bvsmod(bv(0b00010000, 8), bv(0b00000110, 8)),
        bvsmod(bv(0b0010001, 7), bv(0b0000001, 7)),
        bvsmod(bv(0b0010010, 7), bv(0b0000010, 7)),
        bvsmod(bv(0b0010100, 7), bv(0b0000100, 7)),
        bvsmod(bv(0b0001000, 7), bv(0b0001000, 7)),
        bvsmod(bv(0b0010000, 7), bv(0b0010000, 7)),
        bvsmod(bv(0b0100000, 7), bv(0b0100000, 7)),
        bvsmod(bv(0b0000000, 7), bv(0b0000001, 7)),
        bvsmod(bv(0b1000000, 7), bv(0b1000010, 7)),
        bvsmod(bv(0b0000000, 7), bv(0b0000100, 7)),
        bvsmod(bv(0b0100000, 7), bv(0b0000110, 7)),
        bvsmod(bv(0b0010000, 7), bv(0b0000111, 7)),
        bvsmod(bv(291, 16), sx(8, bv(251, 8))),
        bvsmod(bv(4, 16), sx(8, bv(255, 8))),
        bvsmod(zx(16, bv(42313, 16)), sx(16, bv(65491, 16))),
        bvsmod(zx(16, bv(32768, 16)), sx(16, bv(65535, 16))),
        bvsmod(zx(32, bv(4294734073, 32)), sx(32, bv(4294967251, 32))),
        bvsmod(zx(32, bv(2147483648, 32)), sx(32, bv(4294967295, 32))),
        bvsmod(zx(64, bv(18446744073709318393, 64)), sx(64, bv(18446744073709551571, 64))),
        bvsmod(zx(64, bv(9223372036854775808, 64)), sx(64, bv(18446744073709551615, 64))),

        bvsrem(bv(0x88888888, 32), bv(0x99999999, 32)),
        bvsrem(bv(0x12345678, 32), bv(0, 32)),
        bvsrem(bv(0x12345678, 32), bv(1, 32)),
        bvsrem(bv(0x12345678, 32), bv(2, 32)),
        bvsrem(bv(0x12345678, 32), bv(3, 32)),
        bvsrem(bv(0x12345678, 32), bv(32, 32)),
        bvsrem(bv(0x12345678, 32), bv(64, 32)),
        bvsrem(bv(0x12345678, 32), bv(0x12345678, 32)),
        bvsrem(bv(0xf2345678, 32), bv(0, 32)),
        bvsrem(bv(0xf2345678, 32), bv(1, 32)),
        bvsrem(bv(0xf2345678, 32), bv(2, 32)),
        bvsrem(bv(0xf2345678, 32), bv(3, 32)),
        bvsrem(bv(0xf2345678, 32), bv(32, 32)),
        bvsrem(bv(0xf2345678, 32), bv(64, 32)),
        bvsrem(bv(0xf2345678, 32), bv(0x12345678, 32)),
        bvsrem(bv(0b10000000, 8), bv(0, 8)),
        bvsrem(bv(0b10000000, 8), bv(1, 8)),
        bvsrem(bv(0b10000000, 8), bv(2, 8)),
        bvsrem(bv(0b10000000, 8), bv(3, 8)),
        bvsrem(bv(0b10000000, 8), bv(4, 8)),
        bvsrem(bv(0b10000000, 8), bv(5, 8)),
        bvsrem(bv(0b10000000, 8), bv(6, 8)),
        bvsrem(bv(0b10000000, 8), bv(7, 8)),
        bvsrem(bv(0b10000000, 8), bv(8, 8)),
        bvsrem(bv(0b10000000, 8), bv(9, 8)),
        bvsrem(bv(0b10000000, 8), bv(123, 8)),
        bvsrem(bv(0b10001000, 8), bv(0, 8)),
        bvsrem(bv(0b10001000, 8), bv(1, 8)),
        bvsrem(bv(0b10001000, 8), bv(2, 8)),
        bvsrem(bv(0b10001000, 8), bv(3, 8)),
        bvsrem(bv(0b10001000, 8), bv(4, 8)),
        bvsrem(bv(0b10001000, 8), bv(5, 8)),
        bvsrem(bv(0b10001000, 8), bv(6, 8)),
        bvsrem(bv(0b10001000, 8), bv(7, 8)),
        bvsrem(bv(0b10001000, 8), bv(8, 8)),
        bvsrem(bv(0b10001000, 8), bv(9, 8)),
        bvsrem(bv(0b10001000, 8), bv(123, 8)),
        bvsrem(bv(0b00010001, 8), bv(0b00000001, 8)),
        bvsrem(bv(0b00010010, 8), bv(0b00000010, 8)),
        bvsrem(bv(0b00010100, 8), bv(0b00000100, 8)),
        bvsrem(bv(0b00001000, 8), bv(0b00001000, 8)),
        bvsrem(bv(0b00010000, 8), bv(0b00010000, 8)),
        bvsrem(bv(0b00100000, 8), bv(0b00100000, 8)),
        bvsrem(bv(0b01000000, 8), bv(0b01000001, 8)),
        bvsrem(bv(0b10000000, 8), bv(0b10000010, 8)),
        bvsrem(bv(0b01000000, 8), bv(0b00000011, 8)),
        bvsrem(bv(0b00100000, 8), bv(0b00000101, 8)),
        bvsrem(bv(0b00010000, 8), bv(0b00000110, 8)),
        bvsrem(bv(0b0010001, 7), bv(0b0000001, 7)),
        bvsrem(bv(0b0010010, 7), bv(0b0000010, 7)),
        bvsrem(bv(0b0010100, 7), bv(0b0000100, 7)),
        bvsrem(bv(0b0001000, 7), bv(0b0001000, 7)),
        bvsrem(bv(0b0010000, 7), bv(0b0010000, 7)),
        bvsrem(bv(0b0100000, 7), bv(0b0100000, 7)),
        bvsrem(bv(0b0000000, 7), bv(0b0000001, 7)),
        bvsrem(bv(0b1000000, 7), bv(0b1000010, 7)),
        bvsrem(bv(0b0000000, 7), bv(0b0000100, 7)),
        bvsrem(bv(0b0100000, 7), bv(0b0000110, 7)),
        bvsrem(bv(0b0010000, 7), bv(0b0000111, 7)),
        bvsrem(bv(291, 16), sx(8, bv(251, 8))),
        bvsrem(bv(4, 16), sx(8, bv(255, 8))),
        bvsrem(zx(16, bv(42313, 16)), sx(16, bv(65491, 16))),
        bvsrem(zx(16, bv(32768, 16)), sx(16, bv(65535, 16))),
        bvsrem(zx(32, bv(4294734073, 32)), sx(32, bv(4294967251, 32))),
        bvsrem(zx(32, bv(2147483648, 32)), sx(32, bv(4294967295, 32))),
        bvsrem(zx(64, bv(18446744073709318393, 64)), sx(64, bv(18446744073709551571, 64))),
        bvsrem(zx(64, bv(9223372036854775808, 64)), sx(64, bv(18446744073709551615, 64))),
    ]
    count = 0
    for test in tests:
        trv = test.evaluate()
        z3v = evaluateAstViaZ3(test)
        if not trv == z3v:
            print '[KO] %s', test
            print '\tTriton value : %x' %(trv)
            print '\tZ3 value     : %x' %(z3v)
            return -1
        else:
            count += 1
    return count


def test_2():
    count = 0
    setArchitecture(ARCH.X86_64)

    reg      = REG.RAX
    name     = reg.getName()
    size     = reg.getSize()
    sizeBit  = reg.getBitSize()
    cv       = reg.getConcreteValue()
    parent   = reg.getParent()
    t        = reg.getType()
    valid    = reg.isValid()
    flag     = reg.isFlag()
    register = reg.isRegister()

    if name == 'rax':
        count += 1
    else:
        print '[KO] REG.RAX.getName()'
        print '\tOutput   : %s' %(name)
        print '\tExpected : rax'
        return -1

    if size == 8:
        count += 1
    else:
        print '[KO] REG.RAX.getSize()'
        print '\tOutput   : %d' %(size)
        print '\tExpected : 8'
        return -1

    if sizeBit == 64:
        count += 1
    else:
        print '[KO] REG.RAX.getSize()'
        print '\tOutput   : %d' %(sizeBit)
        print '\tExpected : 64'
        return -1

    if cv == 0:
        count += 1
    else:
        print '[KO] REG.RAX.getConcreteValue()'
        print '\tOutput   : 0x%x' %(cv)
        print '\tExpected : 0x0'
        return -1

    # immutable
    reg.setConcreteValue(0x1122334455667788)
    cv = reg.getConcreteValue()
    if cv == 0:
        count += 1
    else:
        print '[KO] REG.RAX.getConcreteValue()'
        print '\tOutput   : 0x%x' %(cv)
        print '\tExpected : 0'
        return -1

    # mutable
    reg2 = Register(reg)
    reg2.setConcreteValue(0x1122334455667788)
    cv = reg2.getConcreteValue()
    if cv == 0x1122334455667788:
        count += 1
    else:
        print '[KO] reg2.getConcreteValue()'
        print '\tOutput   : 0x%x' %(cv)
        print '\tExpected : 0x1122334455667788'
        return -1

    if parent.getName() == 'rax':
        count += 1
    else:
        print '[KO] REG.RAX.getParent().getName()'
        print '\tOutput   : %s' %(parent.getName())
        print '\tExpected : rax'
        return -1

    if t == OPERAND.REG:
        count += 1
    else:
        print '[KO] REG.RAX.getType()'
        print '\tOutput   : %d' %(t)
        print '\tExpected : OPERAND.REG'
        return -1

    if valid:
        count += 1
    else:
        print '[KO] REG.RAX.isValid()'
        print '\tOutput   : false'
        print '\tExpected : true'
        return -1

    if not flag:
        count += 1
    else:
        print '[KO] REG.RAX.isFlag()'
        print '\tOutput   : true'
        print '\tExpected : false'
        return -1

    if register:
        count += 1
    else:
        print '[KO] REG.RAX.isRegister()'
        print '\tOutput   : false'
        print '\tExpected : true'
        return -1

    if REG.AH.getSize() == 1:
        count += 1
    else:
        print '[KO] REG.AH.getSize()'
        print '\tOutput   : %d' %(REG.AH.getSize())
        print '\tExpected : 1'
        return -1

    if REG.AH.getBitvector().getHigh() == 15:
        count += 1
    else:
        print '[KO] REG.AH.getBitvector().getHigh()'
        print '\tOutput   : %d' %(REG.AH.getBitvector().getHigh())
        print '\tExpected : 15'
        return -1

    if REG.AH.getBitvector().getLow() == 8:
        count += 1
    else:
        print '[KO] REG.AH.getBitvector().getLow()'
        print '\tOutput   : %d' %(REG.AH.getBitvector().getLow())
        print '\tExpected : 8'
        return -1

    if REG.AH.getBitvector().getVectorSize() == 8:
        count += 1
    else:
        print '[KO] REG.AH.getBitvector().getVectorSize()'
        print '\tOutput   : %d' %(REG.AH.getBitvector().getVectorSize())
        print '\tExpected : 8'
        return -1

    if REG.AH.getParent().getName() == 'rax':
        count += 1
    else:
        print '[KO] REG.AH.getParent().getName()'
        print '\tOutput   : %s' %(REG.AH.getParent().getName())
        print '\tExpected : rax'
        return -1

    setArchitecture(ARCH.X86)
    if REG.AH.getParent().getName() == 'eax':
        count += 1
    else:
        print '[KO] REG.AH.getParent().getName()'
        print '\tOutput   : %s' %(REG.AH.getParent().getName())
        print '\tExpected : rax'
        return -1

    if REG.AH.getParent().getBitSize() == 32:
        count += 1
    else:
        print '[KO] REG.AH.getParent().getBitSize()'
        print '\tOutput   : %d' %(REG.AH.getParent().getBitSize())
        print '\tExpected : 32'
        return -1

    xmm = Register(REG.XMM1, 0x112233445566778899aabbccddeeff00)
    if xmm.getBitSize() == 128:
        count += 1
    else:
        print '[KO] xmm.getBitSize()'
        print '\tOutput   : %d' %(xmm.getBitSize())
        print '\tExpected : 128'
        return -1

    if xmm.getConcreteValue() == 0x112233445566778899aabbccddeeff00:
        count += 1
    else:
        print '[KO] xmm.getConcreteValue()'
        print '\tOutput   : 0x%x' %(xmm.getConcreteValue())
        print '\tExpected : 0x112233445566778899aabbccddeeff00'
        return -1

    setArchitecture(ARCH.X86_64)
    ymm = Register(REG.YMM1, 0x112233445566778899aabbccddeeff00)
    if ymm.getBitSize() == 256:
        count += 1
    else:
        print '[KO] ymm.getBitSize()'
        print '\tOutput   : %d' %(ymm.getBitSize())
        print '\tExpected : 256'
        return -1

    if ymm.getConcreteValue() == 0x112233445566778899aabbccddeeff00:
        count += 1
    else:
        print '[KO] ymm.getConcreteValue()'
        print '\tOutput   : 0x%x' %(ymm.getConcreteValue())
        print '\tExpected : 0x112233445566778899aabbccddeeff00'
        return -1

    ymm.setConcreteValue(0x112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00)
    if ymm.getConcreteValue() == 0x112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00:
        count += 1
    else:
        print '[KO] ymm.getConcreteValue()'
        print '\tOutput   : 0x%x' %(ymm.getConcreteValue())
        print '\tExpected : 0x112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00'
        return -1

    zmm = Register(REG.ZMM2, 0)
    if zmm.getBitSize() == 512:
        count += 1
    else:
        print '[KO] zmm.getBitSize()'
        print '\tOutput   : %d' %(zmm.getBitSize())
        print '\tExpected : 512'
        return -1

    zmm.setConcreteValue(0x112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00)
    if zmm.getConcreteValue() == 0x112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00:
        count += 1
    else:
        print '[KO] zmm.getConcreteValue()'
        print '\tOutput   : 0x%x' %(zmm.getConcreteValue())
        print '\tExpected : 0x112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff00'
        return -1

    try:
        Register(REG.AL, 0xff)
        count += 1
    except:
        print '[KO] Register(REG.AL, 0xff)'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        Register(REG.AL, 0xff + 1)
        print '[KO] Register(REG.AL, 0xff + 1)'
        print '\tOutput   : OK'
        print '\tExpected : <exception>'
        return -1
    except:
        count += 1

    try:
        Register(REG.AH, 0xff)
        count += 1
    except:
        print '[KO] Register(REG.AH, 0xff)'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        Register(REG.AH, 0xff + 1)
        print '[KO] Register(REG.AH, 0xff + 1)'
        print '\tOutput   : OK'
        print '\tExpected : <exception>'
        return -1
    except:
        count += 1

    try:
        Register(REG.ZF, 1)
        count += 1
    except:
        print '[KO] Register(REG.ZF, 1)'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        Register(REG.ZF, 2)
        print '[KO] Register(REG.ZF, 2)'
        print '\tOutput   : OK'
        print '\tExpected : <exception>'
        return -1
    except:
        count += 1

    try:
        al = Register(REG.AL)
        al.setConcreteValue(0xff)
        count += 1
    except:
        print '[KO] al.setConcreteValue(0xff)'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        al = Register(REG.AL)
        al.setConcreteValue(0x100)
        print '[KO] al.setConcreteValue(0x100)'
        print '\tOutput   : OK'
        print '\tExpected : <exception>'
        return -1
    except:
        count += 1

    setArchitecture(ARCH.X86_64)
    if REG.AX.isOverlapWith(REG.EAX):
        count += 1
    else:
        print '[KO] REG.AX.isOverlapWith(REG.EAX)'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if REG.AX.isOverlapWith(REG.RAX):
        count += 1
    else:
        print '[KO] REG.AX.isOverlapWith(REG.RAX)'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if REG.RAX.isOverlapWith(REG.AX):
        count += 1
    else:
        print '[KO] REG.RAX.isOverlapWith(REG.AX)'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if REG.AH.isOverlapWith(REG.AL):
        print '[KO] REG.AH.isOverlapWith(REG.AL)'
        print '\tOutput   : True'
        print '\tExpected : False'
        return -1
    else:
        count += 1

    if REG.AL.isOverlapWith(REG.AH):
        print '[KO] REG.AL.isOverlapWith(REG.AH)'
        print '\tOutput   : True'
        print '\tExpected : False'
        return -1
    else:
        count += 1

    if REG.AL.isOverlapWith(REG.AX):
        count += 1
    else:
        print '[KO] REG.AL.isOverlapWith(REG.AX)'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if REG.AX.isOverlapWith(REG.AL):
        count += 1
    else:
        print '[KO] REG.AX.isOverlapWith(REG.AL)'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if REG.EAX.isOverlapWith(REG.EDX):
        print '[KO] REG.EAX.isOverlapWith(REG.EDX)'
        print '\tOutput   : True'
        print '\tExpected : False'
        return -1
    else:
        count += 1

    return count


def test_3():
    count = 0
    setArchitecture(ARCH.X86_64)

    mem = MemoryAccess(0x1122334455667788, 8, 0x6162636465666768)

    if mem.getAddress() == 0x1122334455667788:
        count += 1
    else:
        print '[KO] mem.getAddress()'
        print '\tOutput   : 0x%x' %(mem.getAddress())
        print '\tExpected : 0x1122334455667788'
        return -1

    mem = MemoryAccess(0x400f4d3, 8, 0x6162636465666768)

    if mem.getAddress() == 0x400f4d3:
        count += 1
    else:
        print '[KO] mem.getAddress()'
        print '\tOutput   : 0x%x' %(mem.getAddress())
        print '\tExpected : 0x400f4d3'
        return -1

    if mem.getBitSize() == 64:
        count += 1
    else:
        print '[KO] mem.getBitSize()'
        print '\tOutput   : %d' %(mem.getBitSize())
        print '\tExpected : 64'
        return -1

    if mem.getSize() == 8:
        count += 1
    else:
        print '[KO] mem.getSize()'
        print '\tOutput   : %d' %(mem.getSize())
        print '\tExpected : 8'
        return -1

    if mem.getConcreteValue() == 0x6162636465666768:
        count += 1
    else:
        print '[KO] mem.getConcreteValue()'
        print '\tOutput   : 0x%x' %(mem.getConcreteValue())
        print '\tExpected : 0x6162636465666768'
        return -1

    if mem.getType() == OPERAND.MEM:
        count += 1
    else:
        print '[KO] mem.getType()'
        print '\tOutput   : %d' %(mem.getType())
        print '\tExpected : OPERAND.MEM'
        return -1

    mem.setConcreteValue(0x1000)
    if mem.getConcreteValue() == 0x1000:
        count += 1
    else:
        print '[KO] mem.getConcreteValue()'
        print '\tOutput   : 0x%x' %(mem.getConcreteValue())
        print '\tExpected : 0x1000'
        return -1

    if mem.getSize() == 8:
        count += 1
    else:
        print '[KO] mem.getSize()'
        print '\tOutput   : %d' %(mem.getSize())
        print '\tExpected : 8'
        return -1

    if not mem.getBaseRegister().isValid():
        count += 1
    else:
        print '[KO] mem.getBaseRegister()'
        print '\tOutput   : %s' %(mem.getBaseRegister())
        print '\tExpected : unknown:1 bv[0..0]'
        return -1

    if not mem.getIndexRegister().isValid():
        count += 1
    else:
        print '[KO] mem.getIndexRegister()'
        print '\tOutput   : %s' %(mem.getIndexRegister())
        print '\tExpected : unknown:1 bv[0..0]'
        return -1

    if not mem.getSegmentRegister().isValid():
        count += 1
    else:
        print '[KO] mem.getSegmentRegister()'
        print '\tOutput   : %s' %(mem.getSegmentRegister())
        print '\tExpected : unknown:1 bv[0..0]'
        return -1

    if mem.getScale().getValue() == 0:
        count += 1
    else:
        print '[KO] mem.getScale().getValue()'
        print '\tOutput   : 0x%x' %(mem.getScale().getValue())
        print '\tExpected : 0x0'
        return -1

    if mem.getScale().getBitSize() == 1:
        count += 1
    else:
        print '[KO] mem.getScale().getBitSize()'
        print '\tOutput   : %d' %(mem.getScale().getBitSize())
        print '\tExpected : 1'
        return -1

    if mem.getDisplacement().getValue() == 0:
        count += 1
    else:
        print '[KO] mem.getDisplacement().getValue()'
        print '\tOutput   : 0x%x' %(mem.getDisplacement().getValue())
        print '\tExpected : 0x0'
        return -1

    if mem.getLeaAst() is None:
        count += 1
    else:
        print '[KO] mem.getLeaAst()'
        print '\tOutput   : %s' %(mem.getLeaAst())
        print '\tExpected : None'
        return -1

    mem.setBaseRegister(REG.RAX)
    if mem.getBaseRegister().getName() == REG.RAX.getName():
        count += 1
    else:
        print '[KO] mem.setBaseRegister() and mem.getBaseRegister()'
        print '\tOutput   : %s' %(mem.getBaseRegister())
        print '\tExpected : True'
        return -1

    if mem.getBaseRegister().getName() != REG.RBX.getName():
        count += 1
    else:
        print '[KO] mem.setBaseRegister() and mem.getBaseRegister()'
        print '\tOutput   : %s' %(mem.getBaseRegister())
        print '\tExpected : False'
        return -1

    mem.setIndexRegister(REG.RCX)
    if mem.getIndexRegister().getName() == REG.RCX.getName():
        count += 1
    else:
        print '[KO] mem.setIndexRegister() and mem.getIndexRegister()'
        print '\tOutput   : %s' %(mem.getIndexRegister())
        print '\tExpected : True'
        return -1

    if mem.getIndexRegister().getName() != REG.RAX.getName():
        count += 1
    else:
        print '[KO] mem.setIndexRegister() and mem.getIndexRegister()'
        print '\tOutput   : %s' %(mem.getIndexRegister())
        print '\tExpected : False'
        return -1

    mem.setSegmentRegister(REG.FS)
    if mem.getSegmentRegister().getName() == REG.FS.getName():
        count += 1
    else:
        print '[KO] mem.setSegmentRegister() and mem.getSegmentRegister()'
        print '\tOutput   : %s' %(mem.getSegmentRegister())
        print '\tExpected : True'
        return -1

    if mem.getSegmentRegister().getName() != REG.GS.getName():
        count += 1
    else:
        print '[KO] mem.setSegmentRegister() and mem.getSegmentRegister()'
        print '\tOutput   : %s' %(mem.getSegmentRegister())
        print '\tExpected : False'
        return -1

    if MemoryAccess(0x1000, 2).isOverlapWith(MemoryAccess(0x1001, 2)):
        count += 1
    else:
        print '[KO] MemoryAccess(0x1000, 2).isOverlapWith(MemoryAccess(0x1001, 2))'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if MemoryAccess(0xfff, 2).isOverlapWith(MemoryAccess(0x1000, 2)):
        count += 1
    else:
        print '[KO] MemoryAccess(0xfff, 2).isOverlapWith(MemoryAccess(0x1000, 2))'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if MemoryAccess(0x1000, 4).isOverlapWith(MemoryAccess(0x1004, 4)):
        print '[KO] MemoryAccess(0x1000, 4).isOverlapWith(MemoryAccess(0x1004, 4))'
        print '\tOutput   : True'
        print '\tExpected : False'
        return -1
    else:
        count += 1

    if MemoryAccess(0x1000, 4).isOverlapWith(MemoryAccess(0x1003, 2)):
        count += 1
    else:
        print '[KO] MemoryAccess(0x1000, 4).isOverlapWith(MemoryAccess(0x1003, 2))'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if MemoryAccess(0x1000, 4).isOverlapWith(MemoryAccess(0x1002, 1)):
        count += 1
    else:
        print '[KO] MemoryAccess(0x1000, 4).isOverlapWith(MemoryAccess(0x1002, 1))'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if MemoryAccess(0x1002, 1).isOverlapWith(MemoryAccess(0x1000, 4)):
        count += 1
    else:
        print '[KO] MemoryAccess(0x1002, 1).isOverlapWith(MemoryAccess(0x1000, 4))'
        print '\tOutput   : False'
        print '\tExpected : True'
        return -1

    if MemoryAccess(0x1000, 4).isOverlapWith(MemoryAccess(0x10000, 4)):
        print '[KO] MemoryAccess(0x1000, 4).isOverlapWith(MemoryAccess(0x10000, 4))'
        print '\tOutput   : True'
        print '\tExpected : False'
        return -1
    else:
        count += 1

    if MemoryAccess(0x10000, 4).isOverlapWith(MemoryAccess(0x1000, 4)):
        print '[KO] MemoryAccess(0x10000, 4).isOverlapWith(MemoryAccess(0x1000, 4))'
        print '\tOutput   : True'
        print '\tExpected : False'
        return -1
    else:
        count += 1

    return count


def test_4():
    count = 0
    setArchitecture(ARCH.X86_64)

    imm = Immediate(0x1234, CPUSIZE.WORD)

    if imm.getBitSize() == 16:
        count += 1
    else:
        print '[KO] imm.getBitSize()'
        print '\tOutput   : %d' %(imm.getBitSize())
        print '\tExpected : 16'
        return -1

    if imm.getSize() == 2:
        count += 1
    else:
        print '[KO] imm.getSize()'
        print '\tOutput   : %d' %(imm.getSize())
        print '\tExpected : 2'
        return -1

    if imm.getBitSize() != 32:
        count += 1
    else:
        print '[KO] imm.getBitSize()'
        print '\tOutput   : %d' %(imm.getBitSize())
        print '\tExpected : 16'
        return -1

    if imm.getSize() != 1:
        count += 1
    else:
        print '[KO] imm.getSize()'
        print '\tOutput   : %d' %(imm.getSize())
        print '\tExpected : 2'
        return -1

    if imm.getValue() == 0x1234:
        count += 1
    else:
        print '[KO] imm.getValue()'
        print '\tOutput   : 0x%x' %(imm.getValue())
        print '\tExpected : 0x1234'
        return -1

    if imm.getValue() != 0x0234:
        count += 1
    else:
        print '[KO] imm.getValue()'
        print '\tOutput   : 0x%x' %(imm.getValue())
        print '\tExpected : 0x1234'
        return -1

    if imm.getType() == OPERAND.IMM:
        count += 1
    else:
        print '[KO] imm.getType()'
        print '\tOutput   : %d' %(imm.getType())
        print '\tExpected : OPERAND.IMM'
        return -1

    imm = Immediate(-4, CPUSIZE.BYTE)

    if imm.getValue() == 0xfc:
        count += 1
    else:
        print '[KO] imm.getValue()'
        print '\tOutput   : 0x%x' %(imm.getValue())
        print '\tExpected : 0xfc'
        return -1

    imm = Immediate(-4, CPUSIZE.WORD)

    if imm.getValue() == 0xfffc:
        count += 1
    else:
        print '[KO] imm.getValue()'
        print '\tOutput   : 0x%x' %(imm.getValue())
        print '\tExpected : 0xfffc'
        return -1

    imm = Immediate(-4, CPUSIZE.DWORD)

    if imm.getValue() == 0xfffffffc:
        count += 1
    else:
        print '[KO] imm.getValue()'
        print '\tOutput   : 0x%x' %(imm.getValue())
        print '\tExpected : 0xfffffffc'
        return -1

    imm = Immediate(-4, CPUSIZE.QWORD)

    if imm.getValue() == 0xfffffffffffffffc:
        count += 1
    else:
        print '[KO] imm.getValue()'
        print '\tOutput   : 0x%x' %(imm.getValue())
        print '\tExpected : 0xfffffffffffffffc'
        return -1

    return count


def test_5():
    count = 0

    setArchitecture(ARCH.X86_64)
    inst = Instruction()
    inst.setOpcodes("\x48\x01\xd8") # add rax, rbx
    inst.setAddress(0x400000)
    inst.updateContext(Register(REG.RAX, 0x1122334455667788))
    inst.updateContext(Register(REG.RBX, 0x8877665544332211))
    processing(inst)

    if inst.getAddress() == 0x400000:
        count += 1
    else:
        print '[KO] inst.getAddress()'
        print '\tOutput   : %d' %(inst.getAddress())
        print '\tExpected : 0x400000'
        return -1

    if not len(inst.getLoadAccess()):
        count += 1
    else:
        print '[KO] inst.getLoadAccess()'
        print '\tOutput   : %s' %(inst.getLoadAccess())
        print '\tExpected : []'
        return -1

    if not len(inst.getStoreAccess()):
        count += 1
    else:
        print '[KO] inst.getStoreAccess()'
        print '\tOutput   : %s' %(inst.getStoreAccess())
        print '\tExpected : []'
        return -1

    if len(inst.getReadRegisters()) == 2:
        count += 1
    else:
        print '[KO] inst.getReadRegisters()'
        print '\tOutput   : %s' %(inst.getReadRegisters())
        print '\tExpected : [RAX, RBX]'
        return -1

    if len(inst.getWrittenRegisters()) == 8:
        count += 1
    else:
        print '[KO] inst.getReadRegisters()'
        print '\tOutput   : %s' %(inst.getWrittenRegisters())
        print '\tExpected : [RAX, RIP, AF, CF, OF, PF, SF, ZF]'
        return -1

    if not inst.isTainted():
        count += 1
    else:
        print '[KO] inst.isTainted()'
        print '\tOutput   : %d' %(inst.isTainted())
        print '\tExpected : false'
        return -1

    if not inst.isPrefixed():
        count += 1
    else:
        print '[KO] inst.isPrefixed()'
        print '\tOutput   : %d' %(inst.isPrefixed())
        print '\tExpected : false'
        return -1

    if not inst.isMemoryWrite():
        count += 1
    else:
        print '[KO] inst.isMemoryWrite()'
        print '\tOutput   : %d' %(inst.isMemoryWrite())
        print '\tExpected : false'
        return -1

    if not inst.isMemoryRead():
        count += 1
    else:
        print '[KO] inst.isMemoryRead()'
        print '\tOutput   : %d' %(inst.isMemoryRead())
        print '\tExpected : false'
        return -1

    if not inst.isControlFlow():
        count += 1
    else:
        print '[KO] inst.isControlFlow()'
        print '\tOutput   : %d' %(inst.isControlFlow())
        print '\tExpected : false'
        return -1

    if not inst.isConditionTaken():
        count += 1
    else:
        print '[KO] inst.isConditionTaken()'
        print '\tOutput   : %d' %(inst.isConditionTaken())
        print '\tExpected : false'
        return -1

    if not inst.isBranch():
        count += 1
    else:
        print '[KO] inst.isBranch()'
        print '\tOutput   : %d' %(inst.isBranch())
        print '\tExpected : false'

    if inst.getType() == OPCODE.ADD:
        count += 1
    else:
        print '[KO] inst.getType()'
        print '\tOutput   : %d' %(inst.getType())
        print '\tExpected : OPCODE.ADD'
        return -1

    if inst.getThreadId() == 0:
        count += 1
    else:
        print '[KO] inst.getThreadId()'
        print '\tOutput   : %d' %(inst.getThreadId())
        print '\tExpected : 0'
        return -1

    try:
        inst.getThirdOperand()
        print '[KO] inst.getThirdOperand()'
        print '\tOutput   : %s' %(inst.getThirdOperand())
        print '\tExpected : <exception>'
        return -1
    except:
        count += 1

    if len(inst.getSymbolicExpressions()) == 8:
        count += 1
    else:
        print '[KO] inst.getSymbolicExpressions()'
        print '\tOutput   : %d' %(inst.getSymbolicExpressions())
        print '\tExpected : 8 expressions'
        return -1

    if inst.getSize() == 3:
        count += 1
    else:
        print '[KO] inst.getSize()'
        print '\tOutput   : %d' %(inst.getSize())
        print '\tExpected : 3'
        return -1

    if inst.getFirstOperand().getName() == 'rax':
        count += 1
    else:
        print '[KO] inst.getFirstOperand().getName()'
        print '\tOutput   : %s' %(inst.getFirstOperand().getName())
        print '\tExpected : rax'
        return -1

    if inst.getSecondOperand().getName() == 'rbx':
        count += 1
    else:
        print '[KO] inst.getSecondOperand().getName()'
        print '\tOutput   : %s' %(inst.getSecondOperand().getName())
        print '\tExpected : rbx'
        return -1

    if inst.getDisassembly() == 'add rax, rbx':
        count += 1
    else:
        print '[KO] inst.getDisassembly()'
        print '\tOutput   : %s' %(inst.getDisassembly())
        print '\tExpected : add rax, rbx'
        return -1

    if inst.getNextAddress() == 0x400003:
        count += 1
    else:
        print '[KO] inst.getNextAddress()'
        print '\tOutput   : 0x%x' %(inst.getNextAddress())
        print '\tExpected : 0x400003'
        return -1

    if inst.getOpcodes() == "\x48\x01\xd8":
        count += 1
    else:
        print '[KO] inst.getOpcodes()'
        print '\tOutput   : %s' %(repr(inst.getOpcodes()))
        print '\tExpected : \\x48\\x01\\xd8'
        return -1

    if len(inst.getOperands()) == 2:
        count += 1
    else:
        print '[KO] len(inst.getOperands())'
        print '\tOutput   : %s' %(len(inst.getOperands()))
        print '\tExpected : 2'
        return -1

    if inst.getPrefix() == PREFIX.INVALID:
        count += 1
    else:
        print '[KO] inst.getPrefix()'
        print '\tOutput   : %d' %(inst.getPrefix())
        print '\tExpected : PREFIX.INVALID'
        return -1

    return count


def test_6():
    count = 0
    try:
        setArchitecture(ARCH.X86_64)
        setArchitecture(ARCH.X86)
        setArchitecture(ARCH.X86)
        setArchitecture(ARCH.X86_64)
        setArchitecture(ARCH.X86)
        setArchitecture(ARCH.X86)
        setArchitecture(ARCH.X86_64)
        setArchitecture(ARCH.X86_64)
        setArchitecture(ARCH.X86_64)
        setArchitecture(ARCH.X86)
        setArchitecture(ARCH.X86)
        setArchitecture(ARCH.X86_64)
        count += 1
    except:
        print '[KO] Chaining multiple setArchitecture()'
        print '\tOutput   : <exception>'
        print '\tExpected : <nothing>'
        return -1

    setArchitecture(ARCH.X86_64)
    try:
        tmp = REG.RAX
        count += 1
    except:
        print '[KO] REG.RAX not found (64-bits)'
        print '\tOutput   : <exception>'
        print '\tExpected : <nothing>'
        return -1

    try:
        tmp = REG.ZMM1
        count += 1
    except:
        print '[KO] REG.ZMM1 not found (64-bits)'
        print '\tOutput   : <exception>'
        print '\tExpected : <nothing>'
        return -1

    try:
        tmp = REG.XMM15
        count += 1
    except:
        print '[KO] REG.XMM15 not found (64-bits)'
        print '\tOutput   : <exception>'
        print '\tExpected : <nothing>'
        return -1

    setArchitecture(ARCH.X86)
    try:
        tmp = REG.RAX
        print '[KO] REG.RAX found (32-bits)'
        print '\tOutput   : <exception>'
        print '\tExpected : <nothing>'
        return -1
    except:
        count += 1

    try:
        tmp = REG.ZMM1
        print '[KO] REG.ZMM1 found (32-bits)'
        print '\tOutput   : <exception>'
        print '\tExpected : <nothing>'
        return -1
    except:
        count += 1

    try:
        tmp = REG.XMM8
        print '[KO] REG.XMM8 found (32-bits)'
        print '\tOutput   : <exception>'
        print '\tExpected : <nothing>'
        return -1
    except:
        count += 1

    try:
        tmp = REG.XMM15
        print '[KO] REG.XMM15 found (32-bits)'
        print '\tOutput   : <exception>'
        print '\tExpected : <nothing>'
        return -1
    except:
        count += 1

    try:
        tmp = REG.XMM7
        count += 1
    except:
        print '[KO] REG.XMM7 not found (32-bits)'
        print '\tOutput   : <exception>'
        print '\tExpected : <nothing>'
        return -1

    return count


def test_7():
    count = 0

    setArchitecture(ARCH.X86_64)

    setConcreteRegisterValue(Register(REG.ZF, 1))

    if getConcreteRegisterValue(REG.ZF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.AF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.IF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.CF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.DF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.PF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.SF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.TF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 0'
        return -1

    setConcreteRegisterValue(Register(REG.AF, 1))

    if getConcreteRegisterValue(REG.ZF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.AF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.IF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.CF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.DF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.PF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.SF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.TF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 0'
        return -1

    setConcreteRegisterValue(Register(REG.CF, 1))

    if getConcreteRegisterValue(REG.ZF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.AF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.IF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.CF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.DF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.PF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.SF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.TF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 0'
        return -1

    setConcreteRegisterValue(Register(REG.IF, 1))

    if getConcreteRegisterValue(REG.ZF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.AF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.IF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.DF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.PF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.SF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.TF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 0'
        return -1

    setConcreteRegisterValue(Register(REG.DF, 1))

    if getConcreteRegisterValue(REG.ZF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.AF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.IF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.DF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.PF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.SF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.TF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 0'
        return -1

    setConcreteRegisterValue(Register(REG.PF, 1))

    if getConcreteRegisterValue(REG.ZF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.AF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.IF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.DF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.PF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.SF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.TF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 0'
        return -1

    setConcreteRegisterValue(Register(REG.SF, 1))

    if getConcreteRegisterValue(REG.ZF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.AF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.IF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.DF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.PF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.SF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.OF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.TF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 0'
        return -1

    setConcreteRegisterValue(Register(REG.OF, 1))

    if getConcreteRegisterValue(REG.ZF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.AF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.IF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.DF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.PF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.SF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.OF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.TF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 0'
        return -1

    setConcreteRegisterValue(Register(REG.TF, 1))

    if getConcreteRegisterValue(REG.ZF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.AF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.IF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.DF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.PF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.SF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.OF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.TF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 1'
        return -1

    setConcreteRegisterValue(Register(REG.ZF, 0))

    if getConcreteRegisterValue(REG.ZF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.AF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.IF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.DF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.PF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.SF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.OF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.TF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 1'
        return -1

    setConcreteRegisterValue(Register(REG.AF, 0))

    if getConcreteRegisterValue(REG.ZF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.AF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.IF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.DF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.PF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.SF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.OF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.TF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 1'
        return -1

    setConcreteRegisterValue(Register(REG.CF, 0))

    if getConcreteRegisterValue(REG.ZF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.AF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.IF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.DF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.PF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.SF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.OF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.TF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 1'
        return -1

    setConcreteRegisterValue(Register(REG.IF, 0))

    if getConcreteRegisterValue(REG.ZF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.AF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.IF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.CF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.DF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.PF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.SF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.TF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 1'
        return -1

    setConcreteRegisterValue(Register(REG.DF, 0))

    if getConcreteRegisterValue(REG.ZF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.AF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.IF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.CF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.DF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.PF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.SF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.OF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.TF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 1'
        return -1

    setConcreteRegisterValue(Register(REG.PF, 0))

    if getConcreteRegisterValue(REG.ZF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.AF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.IF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.CF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.DF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.PF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.SF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.OF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.TF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 1'
        return -1

    setConcreteRegisterValue(Register(REG.SF, 0))

    if getConcreteRegisterValue(REG.ZF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.AF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.IF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.CF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.DF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.PF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.SF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 1'
        return -1

    if getConcreteRegisterValue(REG.TF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 1'
        return -1

    setConcreteRegisterValue(Register(REG.OF, 0))

    if getConcreteRegisterValue(REG.ZF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.AF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.IF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.CF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.DF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.PF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.SF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.TF) == 1:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 1'
        return -1

    setConcreteRegisterValue(Register(REG.TF, 0))

    if getConcreteRegisterValue(REG.ZF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.ZF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.ZF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.AF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.AF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.AF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.IF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.IF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.IF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.CF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.CF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.CF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.DF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.DF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.DF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.PF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.PF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.PF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.SF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.SF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.SF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.OF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.OF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.OF))
        print '\tExpected : 0'
        return -1

    if getConcreteRegisterValue(REG.TF) == 0:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.TF)'
        print '\tOutput   : %d' %(getConcreteRegisterValue(REG.TF))
        print '\tExpected : 0'
        return -1

    return count


def test_8_setup_reg(regs):
    setConcreteRegisterValue(Register(REG.RAX,    regs['rax']))
    setConcreteRegisterValue(Register(REG.RBX,    regs['rbx']))
    setConcreteRegisterValue(Register(REG.RCX,    regs['rcx']))
    setConcreteRegisterValue(Register(REG.RDX,    regs['rdx']))
    setConcreteRegisterValue(Register(REG.RDI,    regs['rdi']))
    setConcreteRegisterValue(Register(REG.RSI,    regs['rsi']))
    setConcreteRegisterValue(Register(REG.RBP,    regs['rbp']))
    setConcreteRegisterValue(Register(REG.RSP,    regs['rsp']))
    setConcreteRegisterValue(Register(REG.RIP,    regs['rip']))
    setConcreteRegisterValue(Register(REG.R8,     regs['r8']))
    setConcreteRegisterValue(Register(REG.R9,     regs['r9']))
    setConcreteRegisterValue(Register(REG.R10,    regs['r10']))
    setConcreteRegisterValue(Register(REG.R11,    regs['r11']))
    setConcreteRegisterValue(Register(REG.R12,    regs['r12']))
    setConcreteRegisterValue(Register(REG.R13,    regs['r13']))
    setConcreteRegisterValue(Register(REG.R14,    regs['r14']))
    setConcreteRegisterValue(Register(REG.EFLAGS, regs['eflags']))
    setConcreteRegisterValue(Register(REG.XMM0,   regs['xmm0']))
    setConcreteRegisterValue(Register(REG.XMM1,   regs['xmm1']))
    setConcreteRegisterValue(Register(REG.XMM2,   regs['xmm2']))
    setConcreteRegisterValue(Register(REG.XMM3,   regs['xmm3']))
    setConcreteRegisterValue(Register(REG.XMM4,   regs['xmm4']))
    setConcreteRegisterValue(Register(REG.XMM5,   regs['xmm5']))
    setConcreteRegisterValue(Register(REG.XMM6,   regs['xmm6']))
    setConcreteRegisterValue(Register(REG.XMM7,   regs['xmm7']))
    setConcreteRegisterValue(Register(REG.XMM8,   regs['xmm8']))
    setConcreteRegisterValue(Register(REG.XMM9,   regs['xmm9']))
    setConcreteRegisterValue(Register(REG.XMM10,  regs['xmm10']))
    setConcreteRegisterValue(Register(REG.XMM11,  regs['xmm11']))
    setConcreteRegisterValue(Register(REG.XMM12,  regs['xmm12']))
    setConcreteRegisterValue(Register(REG.XMM13,  regs['xmm13']))
    setConcreteRegisterValue(Register(REG.XMM14,  regs['xmm14']))
    setConcreteRegisterValue(Register(REG.XMM15,  regs['xmm15']))
    return


def test_8_setup_mem(mems):
    for mem in mems:
        start = mem['start']
        if mem['memory'] is not None:
            setConcreteMemoryAreaValue(start, bytearray(mem['memory']))
    return


def test_8_emulate(concretize=False):
    count = 0

    pc = getConcreteRegisterValue(REG.RIP)
    while True:
        opcodes = getConcreteMemoryAreaValue(pc, 20)

        instruction = Instruction()
        instruction.setOpcodes(opcodes)
        instruction.setAddress(pc)

        # Check if triton doesn't supports this instruction
        if not processing(instruction):
            print '[KO] Emulation of emu_1.dump'
            print '\tOutput   : <invalid expressions>'
            print '\tExpected : <valid expressions>'
            return -1
        else:
            count += 1

        pc = getConcreteRegisterValue(REG.RIP)

        if concretize == True:
            concretizeAllMemory()
            concretizeAllRegister()

        # End of the emulation
        if pc == 0x409A18:
            rax = getConcreteRegisterValue(REG.RAX)
            rbx = getConcreteRegisterValue(REG.RBX)
            rcx = getConcreteRegisterValue(REG.RCX)
            rdx = getConcreteRegisterValue(REG.RDX)
            rsi = getConcreteRegisterValue(REG.RSI)

            if rax != 0:
                print '[KO] Emulation of emu_1.dump: getConcreteRegisterValue(REG.RAX)'
                print '\tOutput   : %x' %(rax)
                print '\tExpected : 0x0'
                return -1
            else:
                count += 1

            if rbx != 0:
                print '[KO] Emulation of emu_1.dump: getConcreteRegisterValue(REG.RBX)'
                print '\tOutput   : %x' %(rbx)
                print '\tExpected : 0x0'
                return -1
            else:
                count += 1

            if rcx != 0:
                print '[KO] Emulation of emu_1.dump: getConcreteRegisterValue(REG.RCX)'
                print '\tOutput   : %x' %(rcx)
                print '\tExpected : 0x0'
                return -1
            else:
                count += 1

            if rdx != 0x4d2:
                print '[KO] Emulation of emu_1.dump: getConcreteRegisterValue(REG.RDX)'
                print '\tOutput   : %x' %(rdx)
                print '\tExpected : 0x4d2'
                return -1
            else:
                count += 1

            if rsi != 0x3669000000000000:
                print '[KO] Emulation of emu_1.dump: getConcreteRegisterValue(REG.RSI)'
                print '\tOutput   : %x' %(rsi)
                print '\tExpected : 0x3669000000000000'
                return -1
            else:
                count += 1

            # Everything is good
            break
    return count


def test_8_1():
    count = 0

    setArchitecture(ARCH.X86_64)

    fd = open('@CMAKE_SOURCE_DIR@/src/testers/dumps/emu_1.dump')
    data = eval(fd.read())
    fd.close()

    regs = data[0]
    mems = data[1]

    test_8_setup_reg(regs)
    test_8_setup_mem(mems)

    ret = test_8_emulate()
    if ret == -1:
        return -1
    else:
        count += ret

    return count


def test_8_2():
    count = 0

    setArchitecture(ARCH.X86_64)
    enableSymbolicOptimization(OPTIMIZATION.ALIGNED_MEMORY, True)

    fd = open('@CMAKE_SOURCE_DIR@/src/testers/dumps/emu_1.dump')
    data = eval(fd.read())
    fd.close()

    regs = data[0]
    mems = data[1]

    test_8_setup_reg(regs)
    test_8_setup_mem(mems)

    ret = test_8_emulate()
    if ret == -1:
        return -1
    else:
        count += ret

    return count


def test_8_3():
    count = 0

    setArchitecture(ARCH.X86_64)
    enableSymbolicOptimization(OPTIMIZATION.AST_DICTIONARIES, True)

    fd = open('@CMAKE_SOURCE_DIR@/src/testers/dumps/emu_1.dump')
    data = eval(fd.read())
    fd.close()

    regs = data[0]
    mems = data[1]

    test_8_setup_reg(regs)
    test_8_setup_mem(mems)

    ret = test_8_emulate()
    if ret == -1:
        return -1
    else:
        count += ret

    return count


def test_8_4():
    count = 0

    setArchitecture(ARCH.X86_64)
    enableSymbolicOptimization(OPTIMIZATION.ALIGNED_MEMORY, True)
    enableSymbolicOptimization(OPTIMIZATION.AST_DICTIONARIES, True)

    fd = open('@CMAKE_SOURCE_DIR@/src/testers/dumps/emu_1.dump')
    data = eval(fd.read())
    fd.close()

    regs = data[0]
    mems = data[1]

    test_8_setup_reg(regs)
    test_8_setup_mem(mems)

    ret = test_8_emulate()
    if ret == -1:
        return -1
    else:
        count += ret

    return count


def test_8_5():
    count = 0

    setArchitecture(ARCH.X86_64)
    enableSymbolicOptimization(OPTIMIZATION.AST_DICTIONARIES, True)

    fd = open('@CMAKE_SOURCE_DIR@/src/testers/dumps/emu_1.dump')
    data = eval(fd.read())
    fd.close()

    regs = data[0]
    mems = data[1]

    test_8_setup_reg(regs)
    test_8_setup_mem(mems)

    ret = test_8_emulate(concretize=True)
    if ret == -1:
        return -1
    else:
        count += ret

    return count


def test_8_6():
    count = 0

    setArchitecture(ARCH.X86_64)
    enableSymbolicEngine(False)
    enableSymbolicOptimization(OPTIMIZATION.ALIGNED_MEMORY, True)

    fd = open('@CMAKE_SOURCE_DIR@/src/testers/dumps/emu_1.dump')
    data = eval(fd.read())
    fd.close()

    regs = data[0]
    mems = data[1]

    test_8_setup_reg(regs)
    test_8_setup_mem(mems)

    ret = test_8_emulate()
    if ret == -1:
        return -1
    else:
        count += ret

    return count


def test_8_7():
    count = 0

    setArchitecture(ARCH.X86_64)
    enableSymbolicEngine(False)
    enableSymbolicOptimization(OPTIMIZATION.AST_DICTIONARIES, True)

    fd = open('@CMAKE_SOURCE_DIR@/src/testers/dumps/emu_1.dump')
    data = eval(fd.read())
    fd.close()

    regs = data[0]
    mems = data[1]

    test_8_setup_reg(regs)
    test_8_setup_mem(mems)

    ret = test_8_emulate()
    if ret == -1:
        return -1
    else:
        count += ret

    return count


def test_8_8():
    count = 0

    setArchitecture(ARCH.X86_64)
    enableSymbolicEngine(False)
    enableSymbolicOptimization(OPTIMIZATION.ALIGNED_MEMORY, True)
    enableSymbolicOptimization(OPTIMIZATION.AST_DICTIONARIES, True)

    fd = open('@CMAKE_SOURCE_DIR@/src/testers/dumps/emu_1.dump')
    data = eval(fd.read())
    fd.close()

    regs = data[0]
    mems = data[1]

    test_8_setup_reg(regs)
    test_8_setup_mem(mems)

    ret = test_8_emulate()
    if ret == -1:
        return -1
    else:
        count += ret

    return count


def test_9():
    count = 0

    setArchitecture(ARCH.X86_64)

    inst = Instruction()
    # mov eax, DWORD PTR fs:0xffffffffffffdf98
    inst.setOpcodes("\x64\x8B\x04\x25\x98\xDF\xFF\xFF")
    inst.setAddress(0x400000)

    setConcreteRegisterValue(Register(REG.FS, 0x7fffda8ab700))
    processing(inst)

    if not inst.getLoadAccess():
        print '[KO] inst.getLoadAccess()'
        print '\tOutput   : %d' %(len(inst.getLoadAccess()))
        print '\tExpected : 1'
        return -1
    else:
        count += 1

    load, load_ast = inst.getLoadAccess()[0]
    if load.getAddress() != 0x7fffda8a9698:
        print '[KO] load.getAddress()'
        print '\tOutput   : 0x%x' %(load.getAddress())
        print '\tExpected : 0x7fffda8a9698'
        return -1
    else:
        count += 1

    if load.getBitSize() != 32:
        print '[KO] load.getBitSize()'
        print '\tOutput   : %d' %(load.getBitSize())
        print '\tExpected : 32'
        return -1
    else:
        count += 1

    setArchitecture(ARCH.X86_64)

    inst = Instruction()
    # mov rax, QWORD PTR fs:[rax]
    inst.setOpcodes("\x64\x48\x8B\x00")
    inst.setAddress(0x400000)

    setConcreteRegisterValue(Register(REG.FS, 0x7fffda8ab700))
    setConcreteRegisterValue(Register(REG.RAX, 0xffffffffffffdf90))
    processing(inst)

    if not inst.getLoadAccess():
        print '[KO] inst.getLoadAccess()'
        print '\tOutput   : %d' %(len(inst.getLoadAccess()))
        print '\tExpected : 1'
        return -1
    else:
        count += 1

    load, load_ast = inst.getLoadAccess()[0]
    if load.getAddress() != 0x7fffda8a9690:
        print '[KO] load.getAddress()'
        print '\tOutput   : 0x%x' %(load.getAddress())
        print '\tExpected : 0x7fffda8a9690'
        return -1
    else:
        count += 1

    if load.getBitSize() != 64:
        print '[KO] load.getBitSize()'
        print '\tOutput   : %d' %(load.getBitSize())
        print '\tExpected : 64'
        return -1
    else:
        count += 1

    setArchitecture(ARCH.X86)

    inst = Instruction()
    # mov ax, ds:word_40213C
    inst.setOpcodes("\x66\xA1\x3C\x21\x40\x00")
    processing(inst)

    if inst.getOperands()[1].getAddress() != 0x40213C:
        print '[KO] inst.getOperands()[1].getAddress()'
        print '\tOutput   : 0x%x' %(inst.getOperands()[1].getAddress())
        print '\tExpected : 0x40213C'
        return -1
    else:
        count += 1

    if inst.getOperands()[1].getBitSize() != 16:
        print '[KO] inst.getOperands()[1].getBitSize()'
        print '\tOutput   : %d' %(inst.getOperands()[1].getBitSize())
        print '\tExpected : 32'
        return -1
    else:
        count += 1

    return count


def test_10():
    count = 0

    setArchitecture(ARCH.X86)

    taintRegister(REG.EAX)
    inst = Instruction()
    # lea eax,[esi+eax*1]
    inst.setOpcodes("\x8D\x04\x06")
    processing(inst)

    if not isRegisterTainted(REG.EAX):
        print '[KO] isRegisterTainted(REG.EAX)'
        print '\tOutput   : %s' %(repr(isRegisterTainted(REG.EAX)))
        print '\tExpected : true'
        return -1
    else:
        count += 1

    return count


def test_11():
    count = 0

    setArchitecture(ARCH.X86_64)

    inst = Instruction()
    inst.setOpcodes("\x48\xFF\xC0")
    processing(inst)

    value = getSymbolicRegisterValue(REG.RAX)
    if value == 1:
        count += 1
    else:
        print '[KO] getSymbolicRegisterValue(REG.RAX)'
        print '\tOutput   : %d' %(value)
        print '\tExpected : 1'
        return -1

    # This call triton::api.backupSymbolicEngine()
    enableSymbolicEngine(False)

    inst = Instruction()
    inst.setOpcodes("\x48\xFF\xC0")
    processing(inst)

    value = getConcreteRegisterValue(REG.RAX)
    if value == 2:
        count += 1
    else:
        print '[KO] getConcreteRegisterValue(REG.RAX)'
        print '\tOutput   : %d' %(value)
        print '\tExpected : 2'
        return -1

    value = getSymbolicRegisterValue(REG.RAX)
    if value == 1:
        count += 1
    else:
        print '[KO] getSymbolicRegisterValue(REG.RAX)'
        print '\tOutput   : %d' %(value)
        print '\tExpected : 1'
        return -1

    # Try to reset engine to test if the bug #385 is fixed.
    resetEngines()

    return count


def test_12():
    count = 0

    setArchitecture(ARCH.X86_64)

    inst = Instruction("\x00\xDC") # add ah,bl
    try:
        processing(inst)
        count += 1
    except:
        print '[KO] add ah, bl'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    setArchitecture(ARCH.X86_64)
    try:
        processing(Instruction("\x66\x0F\x17\x08")) # movhpd QWORD PTR [rax], xmm1
        count += 1
    except:
        print '[KO] movhpd QWORD PTR [rax], xmm1'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        processing(Instruction("\x66\x0F\x16\x08")) # movhpd xmm1, QWORD PTR [rax]
        count += 1
    except:
        print '[KO] movhpd xmm1, QWORD PTR [rax]'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        processing(Instruction("\x0F\x17\x08")) # movhps QWORD PTR [rax], xmm1
        count += 1
    except:
        print '[KO] movhps QWORD PTR [rax], xmm1'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        processing(Instruction("\x0F\x16\x08")) # movhps xmm1, QWORD PTR [rax]
        count += 1
    except:
        print '[KO] movhps xmm1, QWORD PTR [rax]'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        processing(Instruction("\x66\x0F\x13\x08")) # movlpd QWORD PTR [rax], xmm1
        count += 1
    except:
        print '[KO] movlpd QWORD PTR [rax], xmm1'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        processing(Instruction("\x66\x0F\x12\x08")) # movlpd xmm1, QWORD PTR [rax]
        count += 1
    except:
        print '[KO] movlpd xmm1, QWORD PTR [rax]'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        processing(Instruction("\x0F\x13\x08")) # movlps QWORD PTR [rax], xmm1
        count += 1
    except:
        print '[KO] movlps QWORD PTR [rax], xmm1'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    try:
        processing(Instruction("\x0F\x12\x08")) # movlps xmm1, QWORD PTR [rax]
        count += 1
    except:
        print '[KO] movlps xmm1, QWORD PTR [rax]'
        print '\tOutput   : <exception>'
        print '\tExpected : OK'
        return -1

    # ============

    setArchitecture(ARCH.X86)

    inst1 = Instruction('\xBC\x00\xFE\x19\x00')         # mov esp, 0x19fe00
    inst2 = Instruction('\xC7\x04\x24\x11\x11\x11\x11') # mov dword ptr [esp], 0x11111111
    inst3 = Instruction('\x8F\x04\x24')                 # pop dword ptr [esp]
    processing(inst1)
    processing(inst2)
    processing(inst3)

    if inst3.getOperands()[0].getAddress() == 0x19fe04:
        count += 1
    else:
        print '[KO] pop dword ptr [esp] -> memory operand'
        print '\tOutput   : 0x%x' %(inst3.getOperands()[0].getAddress())
        print '\tExpected : 0x19fe04'
        return -1

    if inst3.getOperands()[0].getConcreteValue() == 0x11111111:
        count += 1
    else:
        print '[KO] pop dword ptr [esp] -> concrete value'
        print '\tOutput   : 0x%x' %(inst3.getOperands()[0].getConcreteValue())
        print '\tExpected : 0x11111111'
        return -1

    if inst3.getStoreAccess()[0][0].getAddress() == 0x19fe04:
        count += 1
    else:
        print '[KO] pop dword ptr [esp] -> store access'
        print '\tOutput   : 0x%x' %(inst3.getStoreAccess()[0][0].getAddress())
        print '\tExpected : 0x19fe04'
        return -1

    if inst3.getStoreAccess()[0][1].evaluate() == 0x11111111:
        count += 1
    else:
        print '[KO] pop dword ptr [esp] -> concrete value over store access'
        print '\tOutput   : 0x%x' %(inst3.getStoreAccess()[0][1].evaluate())
        print '\tExpected : 0x11111111'
        return -1

    # ============

    setArchitecture(ARCH.X86)

    inst1 = Instruction('\xBC\x00\xFE\x19\x00')         # mov esp, 0x19fe00
    inst2 = Instruction('\xBF\x00\xFE\x19\x00')         # mov edi, 0x19fe00
    inst3 = Instruction('\xC7\x04\x24\x11\x11\x11\x11') # mov dword ptr [esp], 0x11111111
    inst4 = Instruction('\x8F\x07')                     # pop dword ptr [edi]
    processing(inst1)
    processing(inst2)
    processing(inst3)
    processing(inst4)

    if inst4.getOperands()[0].getAddress() == 0x19fe00:
        count += 1
    else:
        print '[KO] pop dword ptr [edi] -> memory operand'
        print '\tOutput   : 0x%x' %(inst4.getOperands()[0].getAddress())
        print '\tExpected : 0x19fe00'
        return -1

    if inst4.getOperands()[0].getConcreteValue() == 0x11111111:
        count += 1
    else:
        print '[KO] pop dword ptr [edi] -> concrete value'
        print '\tOutput   : 0x%x' %(inst4.getOperands()[0].getConcreteValue())
        print '\tExpected : 0x11111111'
        return -1

    if inst4.getStoreAccess()[0][0].getAddress() == 0x19fe00:
        count += 1
    else:
        print '[KO] pop dword ptr [edi] -> store access'
        print '\tOutput   : 0x%x' %(inst4.getStoreAccess()[0][0].getAddress())
        print '\tExpected : 0x19fe00'
        return -1

    if inst4.getStoreAccess()[0][1].evaluate() == 0x11111111:
        count += 1
    else:
        print '[KO] pop dword ptr [edi] -> concrete value over store access'
        print '\tOutput   : 0x%x' %(inst4.getStoreAccess()[0][1].evaluate())
        print '\tExpected : 0x11111111'
        return -1

    return count


def test_13():
    count = 0

    setArchitecture(ARCH.X86_64)

    expr1 = newSymbolicExpression(ast.bv(0x11, 8))
    mem   = MemoryAccess(0x100, CPUSIZE.BYTE)
    assignSymbolicExpressionToMemory(expr1, mem)
    expr2 = getSymbolicExpressionFromId(getSymbolicMemoryId(0x100))

    if expr1.getAst().evaluate() == expr2.getAst().evaluate():
        count += 1
    else:
        print '[KO] assignSymbolicExpressionToMemory'
        print '\tOutput   : 0x%x' %(expr2.getAst().evaluate())
        print '\tExpected : 0x11'
        return -1

    expr1 = newSymbolicExpression(ast.bv(0x11223344, 32))
    mem   = MemoryAccess(0x100, CPUSIZE.DWORD)
    assignSymbolicExpressionToMemory(expr1, mem)
    expr2 = getSymbolicExpressionFromId(getSymbolicMemoryId(0x100))
    expr3 = getSymbolicExpressionFromId(getSymbolicMemoryId(0x101))
    expr4 = getSymbolicExpressionFromId(getSymbolicMemoryId(0x102))
    expr5 = getSymbolicExpressionFromId(getSymbolicMemoryId(0x103))

    if expr2.getAst().evaluate() == 0x44:
        count += 1
    else:
        print '[KO] expr2.getAst().evaluate()'
        print '\tOutput   : 0x%x' %(expr2.getAst().evaluate())
        print '\tExpected : 0x44'
        return -1

    if expr3.getAst().evaluate() == 0x33:
        count += 1
    else:
        print '[KO] expr3.getAst().evaluate()'
        print '\tOutput   : 0x%x' %(expr3.getAst().evaluate())
        print '\tExpected : 0x33'
        return -1

    if expr4.getAst().evaluate() == 0x22:
        count += 1
    else:
        print '[KO] expr4.getAst().evaluate()'
        print '\tOutput   : 0x%x' %(expr4.getAst().evaluate())
        print '\tExpected : 0x22'
        return -1

    if expr5.getAst().evaluate() == 0x11:
        count += 1
    else:
        print '[KO] expr5.getAst().evaluate()'
        print '\tOutput   : 0x%x' %(expr5.getAst().evaluate())
        print '\tExpected : 0x11'
        return -1

    expr1 = newSymbolicExpression(ast.bv(0x11223344, 32))
    mem   = MemoryAccess(0x100, CPUSIZE.DWORD)
    assignSymbolicExpressionToMemory(expr1, mem)

    if getSymbolicMemoryValue(mem) == 0x11223344:
        count += 1
    else:
        print '[KO] getSymbolicMemoryValue(mem)'
        print '\tOutput   : 0x%x' %(getSymbolicMemoryValue(mem))
        print '\tExpected : 0x11223344'
        return -1

    setArchitecture(ARCH.X86_64)
    expr1 = newSymbolicExpression(ast.bv(0x11223344, 64))
    assignSymbolicExpressionToRegister(expr1, REG.RAX)

    if getSymbolicRegisterValue(REG.RAX) == 0x11223344:
        count += 1
    else:
        print '[KO] getSymbolicRegisterValue(REG.RAX)'
        print '\tOutput   : 0x%x' %(getSymbolicRegisterValue(REG.RAX))
        print '\tExpected : 0x11223344'
        return -1

    setArchitecture(ARCH.X86_64)
    expr1 = newSymbolicExpression(ast.bv(0x11223344, 32))
    try:
        assignSymbolicExpressionToRegister(expr1, REG.RAX)
        print '[KO] assignSymbolicExpressionToRegister(expr1, REG.RAX)'
        print '\tOutput   : OK'
        print '\tExpected : <exception>'
        return -1
    except:
        count += 1

    return count


def test_14():
    count = 0

    setArchitecture(ARCH.X86_64)
    node = buildSymbolicImmediate(Immediate(0x10, CPUSIZE.BYTE))
    if node.evaluate() == 0x10:
        count += 1
    else:
        print '[KO] node.evaluate()'
        print '\tOutput   : 0x%x' %(node.evaluate())
        print '\tExpected : 0x10'
        return -1
    if node.getBitvectorSize() == CPUSIZE.BYTE_BIT:
        count += 1
    else:
        print '[KO] node.getBitvectorSize()'
        print '\tOutput   : %d' %(node.getBitvectorSize())
        print '\tExpected : 8'
        return -1

    setArchitecture(ARCH.X86_64)
    expr1 = newSymbolicExpression(ast.bv(0x1122334455667788, CPUSIZE.QWORD_BIT))
    assignSymbolicExpressionToRegister(expr1, REG.RAX)

    node = buildSymbolicRegister(REG.RAX)
    if node.evaluate() == 0x1122334455667788:
        count += 1
    else:
        print '[KO] node.evaluate()'
        print '\tOutput   : 0x%x' %(node.evaluate())
        print '\tExpected : 0x1122334455667788'
        return -1
    if node.getBitvectorSize() == CPUSIZE.QWORD_BIT:
        count += 1
    else:
        print '[KO] node.getBitvectorSize()'
        print '\tOutput   : %d' %(node.getBitvectorSize())
        print '\tExpected : 64'
        return -1

    node = buildSymbolicRegister(REG.EAX)
    if node.evaluate() == 0x55667788:
        count += 1
    else:
        print '[KO] node.evaluate()'
        print '\tOutput   : 0x%x' %(node.evaluate())
        print '\tExpected : 0x55667788'
        return -1
    if node.getBitvectorSize() == CPUSIZE.DWORD_BIT:
        count += 1
    else:
        print '[KO] node.getBitvectorSize()'
        print '\tOutput   : %d' %(node.getBitvectorSize())
        print '\tExpected : 32'
        return -1

    node = buildSymbolicRegister(REG.AX)
    if node.evaluate() == 0x7788:
        count += 1
    else:
        print '[KO] node.evaluate()'
        print '\tOutput   : 0x%x' %(node.evaluate())
        print '\tExpected : 0x7788'
        return -1
    if node.getBitvectorSize() == CPUSIZE.WORD_BIT:
        count += 1
    else:
        print '[KO] node.getBitvectorSize()'
        print '\tOutput   : %d' %(node.getBitvectorSize())
        print '\tExpected : 16'
        return -1

    node = buildSymbolicRegister(REG.AH)
    if node.evaluate() == 0x77:
        count += 1
    else:
        print '[KO] node.evaluate()'
        print '\tOutput   : 0x%x' %(node.evaluate())
        print '\tExpected : 0x77'
        return -1
    if node.getBitvectorSize() == CPUSIZE.BYTE_BIT:
        count += 1
    else:
        print '[KO] node.getBitvectorSize()'
        print '\tOutput   : %d' %(node.getBitvectorSize())
        print '\tExpected : 8'
        return -1

    node = buildSymbolicRegister(REG.AL)
    if node.evaluate() == 0x88:
        count += 1
    else:
        print '[KO] node.evaluate()'
        print '\tOutput   : 0x%x' %(node.evaluate())
        print '\tExpected : 0x88'
        return -1
    if node.getBitvectorSize() == CPUSIZE.BYTE_BIT:
        count += 1
    else:
        print '[KO] node.getBitvectorSize()'
        print '\tOutput   : %d' %(node.getBitvectorSize())
        print '\tExpected : 8'
        return -1

    return count


test15_function = {
                                              #   <serial> function
  0x40056d: "\x55",                           #   push    rbp
  0x40056e: "\x48\x89\xe5",                   #   mov     rbp,rsp
  0x400571: "\x48\x89\x7d\xe8",               #   mov     QWORD PTR [rbp-0x18],rdi
  0x400575: "\xc7\x45\xfc\x00\x00\x00\x00",   #   mov     DWORD PTR [rbp-0x4],0x0
  0x40057c: "\xeb\x3f",                       #   jmp     4005bd <check+0x50>
  0x40057e: "\x8b\x45\xfc",                   #   mov     eax,DWORD PTR [rbp-0x4]
  0x400581: "\x48\x63\xd0",                   #   movsxd  rdx,eax
  0x400584: "\x48\x8b\x45\xe8",               #   mov     rax,QWORD PTR [rbp-0x18]
  0x400588: "\x48\x01\xd0",                   #   add     rax,rdx
  0x40058b: "\x0f\xb6\x00",                   #   movzx   eax,BYTE PTR [rax]
  0x40058e: "\x0f\xbe\xc0",                   #   movsx   eax,al
  0x400591: "\x83\xe8\x01",                   #   sub     eax,0x1
  0x400594: "\x83\xf0\x55",                   #   xor     eax,0x55
  0x400597: "\x89\xc1",                       #   mov     ecx,eax
  0x400599: "\x48\x8b\x15\xa0\x0a\x20\x00",   #   mov     rdx,QWORD PTR [rip+0x200aa0]        # 601040 <serial>
  0x4005a0: "\x8b\x45\xfc",                   #   mov     eax,DWORD PTR [rbp-0x4]
  0x4005a3: "\x48\x98",                       #   cdqe
  0x4005a5: "\x48\x01\xd0",                   #   add     rax,rdx
  0x4005a8: "\x0f\xb6\x00",                   #   movzx   eax,BYTE PTR [rax]
  0x4005ab: "\x0f\xbe\xc0",                   #   movsx   eax,al
  0x4005ae: "\x39\xc1",                       #   cmp     ecx,eax
  0x4005b0: "\x74\x07",                       #   je      4005b9 <check+0x4c>
  0x4005b2: "\xb8\x01\x00\x00\x00",           #   mov     eax,0x1
  0x4005b7: "\xeb\x0f",                       #   jmp     4005c8 <check+0x5b>
  0x4005b9: "\x83\x45\xfc\x01",               #   add     DWORD PTR [rbp-0x4],0x1
  0x4005bd: "\x83\x7d\xfc\x04",               #   cmp     DWORD PTR [rbp-0x4],0x4
  0x4005c1: "\x7e\xbb",                       #   jle     40057e <check+0x11>
  0x4005c3: "\xb8\x00\x00\x00\x00",           #   mov     eax,0x0
  0x4005c8: "\x5d",                           #   pop     rbp
  0x4005c9: "\xc3",                           #   ret
}


# This function emulates the code.
def test15_run(ip):
    while ip in test15_function:
        # Build an instruction
        inst = Instruction()

        # Setup opcodes
        inst.setOpcodes(test15_function[ip])

        # Setup Address
        inst.setAddress(ip)

        # Process everything
        processing(inst)

        # Next instruction
        ip = buildSymbolicRegister(REG.RIP).evaluate()
    return


# This function initializes the context memory.
def test15_initContext():
    # Define the address of the serial pointer. The address of the serial pointer
    # must be the same that the one hardcoded into the targeted function. However,
    # the serial pointer (here 0x900000) is arbitrary.
    setConcreteMemoryValue(0x601040, 0x00)
    setConcreteMemoryValue(0x601041, 0x00)
    setConcreteMemoryValue(0x601042, 0x90)

    # Define the serial context. We store the serial content located on our arbitrary
    # serial pointer (0x900000).
    setConcreteMemoryValue(0x900000, 0x31)
    setConcreteMemoryValue(0x900001, 0x3e)
    setConcreteMemoryValue(0x900002, 0x3d)
    setConcreteMemoryValue(0x900003, 0x26)
    setConcreteMemoryValue(0x900004, 0x31)

    # Point RDI on our buffer. The address of our buffer is arbitrary. We just need
    # to point the RDI register on it as first argument of our targeted function.
    setConcreteRegisterValue(Register(REG.RDI, 0x1000))

    # Setup stack on an abitrary address.
    setConcreteRegisterValue(Register(REG.RSP, 0x7fffffff))
    setConcreteRegisterValue(Register(REG.RBP, 0x7fffffff))
    return


# This function returns a set of new inputs based on the last trace.
def test15_getNewInput():
    # Set of new inputs
    inputs = list()

    # Get path constraints from the last execution
    pco = getPathConstraints()

    # We start with any input. T (Top)
    previousConstraints = equal(bvtrue(), bvtrue())

    # Go through the path constraints
    for pc in pco:
        # If there is a condition
        if pc.isMultipleBranches():
            # Get all branches
            branches = pc.getBranchConstraints()
            for branch in branches:
                # Get the constraint of the branch which has been not taken
                if branch['isTaken'] == False:
                    # Ask for a model
                    models = getModel(assert_(land(previousConstraints, branch['constraint'])))
                    seed   = dict()
                    for k, v in models.items():
                        # Get the symbolic variable assigned to the model
                        symVar = getSymbolicVariableFromId(k)
                        # Save the new input as seed.
                        seed.update({symVar.getKindValue(): v.getValue()})
                    if seed:
                        inputs.append(seed)

        # Update the previous constraints with true branch to keep a good path.
        previousConstraints = land(previousConstraints, pc.getTakenPathConstraintAst())

    # Clear the path constraints to be clean at the next execution.
    clearPathConstraints()

    return inputs


def test15_symbolizeInputs(seed):
    # Clean symbolic state
    concretizeAllRegister()
    concretizeAllMemory()
    for address, value in seed.items():
        convertMemoryToSymbolicVariable(MemoryAccess(address, CPUSIZE.BYTE, value))
        convertMemoryToSymbolicVariable(MemoryAccess(address+1, CPUSIZE.BYTE))
    return


def test_15_core():
    # Define entry point
    ENTRY = 0x40056d

    # We start the execution with a random value located at 0x1000.
    lastInput = list()
    worklist  = list([{0x1000:1}])

    while worklist:
        # Take the first seed
        seed = worklist[0]

        # Symbolize inputs
        test15_symbolizeInputs(seed)

        # Init context memory
        test15_initContext()

        # Emulate
        test15_run(ENTRY)

        lastInput += [dict(seed)]
        del worklist[0]

        newInputs = test15_getNewInput()
        for inputs in newInputs:
            if inputs not in lastInput and inputs not in worklist:
                worklist += [dict(inputs)]

    return lastInput


def test_15_1():
    count = 0

    # Set the architecture
    setArchitecture(ARCH.X86_64)

    # Symbolic optimization
    enableSymbolicOptimization(OPTIMIZATION.ALIGNED_MEMORY, True)

    lastInput = test_15_core()

    if {4096L: 101L, 4097L: 108L, 4098L: 105L, 4099L: 116L, 4100L: 101L} in lastInput:
        count += 1
    else:
        print '[KO] lastInput{}'
        print '\tOutput   : missing valid model'
        print '\tExpected : "elite"'
        return -1

    return count


def test_15_2():
    count = 0

    # Set the architecture
    setArchitecture(ARCH.X86_64)

    # Symbolic optimization
    enableSymbolicOptimization(OPTIMIZATION.ALIGNED_MEMORY, True)
    enableSymbolicOptimization(OPTIMIZATION.AST_DICTIONARIES, True)

    lastInput = test_15_core()

    if {4096L: 101L, 4097L: 108L, 4098L: 105L, 4099L: 116L, 4100L: 101L} in lastInput:
        count += 1
    else:
        print '[KO] lastInput{}'
        print '\tOutput   : missing valid model'
        print '\tExpected : "elite"'
        return -1

    return count


def test_15_3():
    count = 0

    # Set the architecture
    setArchitecture(ARCH.X86_64)

    lastInput = test_15_core()

    if {4096L: 101L, 4097L: 108L, 4098L: 105L, 4099L: 116L, 4100L: 101L} in lastInput:
        count += 1
    else:
        print '[KO] lastInput{}'
        print '\tOutput   : missing valid model'
        print '\tExpected : "elite"'
        return -1

    return count


# Emulate the CheckSolution() function.
def test16_emulate(pc):
    while pc:
        # Fetch opcodes
        opcodes = getConcreteMemoryAreaValue(pc, 16)

        # Create the Triton instruction
        instruction = Instruction()
        instruction.setOpcodes(opcodes)
        instruction.setAddress(pc)

        # Process
        processing(instruction)

        # 40078B: cmp eax, 1
        # eax must be equal to 1 at each round.
        if instruction.getAddress() == 0x40078B:
            # Slice expressions
            rax   = getSymbolicExpressionFromId(getSymbolicRegisterId(REG.RAX))
            eax   = ast.extract(31, 0, rax.getAst())

            # Define constraint
            cstr  = ast.assert_(
                        ast.land(
                            getPathConstraintsAst(),
                            ast.equal(eax, ast.bv(1, 32))
                        )
                    )

            model = getModel(cstr)
            solution = str()
            for k, v in model.items():
                value = v.getValue()
                solution += chr(value)
                getSymbolicVariableFromId(k).setConcreteValue(value)

        # Next
        pc = getConcreteRegisterValue(REG.RIP)

    return solution


# Load segments into triton.
def test16_loadBinary(path):
    binary = Elf(path)
    raw    = binary.getRaw()
    phdrs  = binary.getProgramHeaders()
    for phdr in phdrs:
        offset = phdr.getOffset()
        size   = phdr.getFilesz()
        vaddr  = phdr.getVaddr()
        setConcreteMemoryAreaValue(vaddr, raw[offset:offset+size])
    return


def test16_core():
    # Load the binary
    test16_loadBinary('@CMAKE_SOURCE_DIR@/src/testers/misc/defcamp-2015-r100.bin')

    # Define a fake stack
    setConcreteRegisterValue(Register(REG.RBP, 0x7fffffff))
    setConcreteRegisterValue(Register(REG.RSP, 0x6fffffff))

    # Define an user input
    setConcreteRegisterValue(Register(REG.RDI, 0x10000000))

    # Symbolize user inputs (30 bytes)
    for index in range(30):
        convertMemoryToSymbolicVariable(MemoryAccess(0x10000000+index, CPUSIZE.BYTE))

    # Emulate from the verification function
    solution = test16_emulate(0x4006FD)

    return solution


def test_16_1():
    count = 0

    # Define the target architecture
    setArchitecture(ARCH.X86_64)

    # Define symbolic optimizations
    enableSymbolicOptimization(OPTIMIZATION.ALIGNED_MEMORY, True)
    enableSymbolicOptimization(OPTIMIZATION.ONLY_ON_SYMBOLIZED, True)

    solution = test16_core()

    if solution == 'Code_Talkers':
        count += 1
    else:
        print '[KO] Solving defcamp-2015-r100'
        print '\tOutput   : "%s"' %(solution)
        print '\tExpected : "Code_Talkers"'
        return -1

    return count


def test_16_2():
    count = 0

    # Define the target architecture
    setArchitecture(ARCH.X86_64)

    solution = test16_core()

    if solution == 'Code_Talkers':
        count += 1
    else:
        print '[KO] Solving defcamp-2015-r100'
        print '\tOutput   : "%s"' %(solution)
        print '\tExpected : "Code_Talkers"'
        return -1

    return count


units_testing = [
    ("Testing the arithmetic and logic AST interpreter", test_1),
    ("Testing the Register class", test_2),
    ("Testing the MemoryAccess class", test_3),
    ("Testing the Immediate class", test_4),
    ("Testing the Instruction class", test_5),
    ("Testing the architectures", test_6),
    ("Testing the concrete flag values", test_7),
    ("Testing the symbolic emulation engine without optimization", test_8_1),
    ("Testing the symbolic emulation engine with the ALIGNED_MEMORY optimization", test_8_2),
    ("Testing the symbolic emulation engine with the AST_DICTIONARIES optimization", test_8_3),
    ("Testing the symbolic emulation engine with the ALIGNED_MEMORY and AST_DICTIONARIES optimizations", test_8_4),
    ("Testing the symbolic emulation engine with the AST_DICTIONARIES optimization and concretization", test_8_5),
    ("Testing the symbolic emulation without symbolic engine and with the ALIGNED_MEMORY optimization", test_8_6),
    #("Testing the symbolic emulation without symbolic engine and with the AST_DICTIONARIES optimization", test_8_7),
    #("Testing the symbolic emulation without symbolic engine and with the ALIGNED_MEMORY and AST_DICTIONARIES optimizations", test_8_8),
    ("Testing the LOAD access semantics", test_9),
    ("Testing the taint engine", test_10),
    ("Testing the symbolic engine backup", test_11),
    ("Testing known issues", test_12),
    ("Testing symbolic assignments", test_13),
    ("Testing symbolic building", test_14),
    ("Testing code coverage with ALIGNED_MEMORY optimization", test_15_1),
    ("Testing code coverage with ALIGNED_MEMORY and AST_DICTIONARIES optimizations", test_15_2),
    ("Testing code coverage without optimization", test_15_3),
    ("Solving RE challenge with ALIGNED_MEMORY and ONLY_ON_SYMBOLIZED optimizations", test_16_1),
    ("Solving RE challenge without optimization", test_16_2),
]


if __name__ == '__main__':
    count = 0
    for n, f in units_testing:
        ret = f()
        if ret < 0:
            print
            print 'Error into \'%s\'' %(n)
            sys.exit(-1)
        else:
            count += ret
            print '[OK] %s' %(n)
    print
    print '[GOOD]\t%s tests were been executed successfully :-)' %('{0:,}'.format(count))
    sys.exit(0)

